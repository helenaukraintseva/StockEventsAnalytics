import streamlit as st
import pandas as pd
import requests
import plotly.express as px
import plotly.graph_objects as go
import numpy as np
import time
import matplotlib.pyplot as plt
import os
from settings import tokens, tokens_dict
import joblib
import algorithms
import ml_models, ml_model_price
import nn_model_buy, nn_model_price
from trend_detector import TrendDetector

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ö—Ä–∏–ø—Ç–æ-–≥—Ä–∞—Ñ–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", layout="wide")

st.title("üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
tab = st.sidebar.radio("–ú–µ–Ω—é:", ["üìà –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                                 # "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 "üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                 "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É",
                                 "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É",
                                 "üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã"])


# --- –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å Binance ---
def get_crypto_price(symbol):
    url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()
        return float(data["price"])
    except requests.exceptions.RequestException:
        return None


def get_historical_data(symbol, interval="1m", limit=100):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        df = pd.DataFrame(data, columns=["time", "Open", "High", "Low", "price", "Volume", "_", "_", "_", "_", "_", "_"])
        df = df[["time", "price"]]
        df["time"] = pd.to_datetime(df["time"], unit="ms") + pd.Timedelta(hours=3)
        df["price"] = df["price"].astype(float)
        return df
    except requests.exceptions.RequestException:
        return None


def get_crypto_data(symbol, interval="1m", limit=100):
    url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
    try:
        response = requests.get(url)
        response.raise_for_status()
        data = response.json()

        df = pd.DataFrame(data, columns=[
            "time", "open", "high", "low", "close", "volume", "_", "_", "_", "_", "_", "_"
        ])
        df = df[["time", "open", "high", "low", "close", "volume"]]
        df["time"] = pd.to_datetime(df["time"], unit="ms")
        df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(float)

        return df
    except requests.exceptions.RequestException as e:
        st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")
        return None


# --- –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç —Å Binance ---
# def get_all_binance_symbols():
#     url = "https://api.binance.com/api/v3/exchangeInfo"
#     try:
#         response = requests.get(url)
#         response.raise_for_status()
#         data = response.json()
#         return [symbol["symbol"] for symbol in data["symbols"] if symbol["symbol"].endswith("USDT")]
#     except requests.exceptions.RequestException as e:
#         st.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å–ø–∏—Å–∫–∞ –º–æ–Ω–µ—Ç: {e}")
#         return []


# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ ---
if "price_history" not in st.session_state:
    st.session_state.price_history = {}

# --- –í–∫–ª–∞–¥–∫–∞ "–ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" ---
if tab == "üìà –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç":
    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ---
    crypto_options = tokens_dict
    st.subheader("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    col1, col2 = st.columns(2)
    with col1:
        selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", list(crypto_options.keys()), key="crypto_graph")

    with col2:
        update_interval = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω):", [1, 5, 10, 15, 30], key="interval_graph")

    if "price_history" not in st.session_state:
        st.session_state.price_history = {}

    if selected_crypto not in st.session_state.price_history:
        st.session_state.price_history[selected_crypto] = []

    placeholder = st.empty()
    if len(st.session_state.price_history[selected_crypto]) < 100:
        st.write("üîÑ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        historical_data = get_historical_data(crypto_options[selected_crypto])

        if historical_data is not None:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ session_state
            st.session_state.price_history[selected_crypto] = historical_data.to_dict("records")

    while True:
        price = get_crypto_price(crypto_options[selected_crypto])
        st.write()

        if price:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Ü–µ–Ω—É –≤ –∏—Å—Ç–æ—Ä–∏—é
            st.session_state.price_history[selected_crypto].append({"time": pd.Timestamp.now(), "price": price})

            # –û—Å—Ç–∞–≤–ª—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 –∑–∞–ø–∏—Å–µ–π
            st.session_state.price_history[selected_crypto] = st.session_state.price_history[selected_crypto][-100:]

            # –°–æ–∑–¥–∞–µ–º DataFrame
            df = pd.DataFrame(st.session_state.price_history[selected_crypto])

            # --- –ì—Ä–∞—Ñ–∏–∫ ---
            fig = px.line(df, x="time", y="price", title=f"–ì—Ä–∞—Ñ–∏–∫ {selected_crypto}",
                          labels={"time": "–í—Ä–µ–º—è", "price": "–¶–µ–Ω–∞ (USDT)"}, template="plotly_dark")
            # placeholder.plotly_chart(fig, use_container_width=True)

            # –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥—Ä–∞—Ñ–∏–∫
            with placeholder:
                placeholder.plotly_chart(fig, use_container_width=True)

        time.sleep(int(update_interval * 60))

# --- –í–∫–ª–∞–¥–∫–∞ "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞" ---
# elif tab == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞":
#     crypto_options = tokens_dict
#     st.subheader("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏")
#
#     selected_crypto_stat = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", list(crypto_options.keys()), key="crypto_stat")
#
#     st.subheader(f"üìä –ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 —Ü–µ–Ω {selected_crypto_stat}")
#
#     if selected_crypto_stat in st.session_state.price_history and st.session_state.price_history[selected_crypto_stat]:
#         df = pd.DataFrame(st.session_state.price_history[selected_crypto_stat]).tail(10)
#         st.dataframe(df)
#     else:
#         st.warning("–î–∞–Ω–Ω—ã—Ö –ø–æ–∫–∞ –Ω–µ—Ç. –ü–µ—Ä–µ–∫–ª—é—á–∏—Ç–µ—Å—å –Ω–∞ –≤–∫–ª–∞–¥–∫—É '–ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç', —á—Ç–æ–±—ã –æ–Ω–∏ –ø–æ—è–≤–∏–ª–∏—Å—å.")

elif tab == "üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
    st.title("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ —Ç—Ä–µ–Ω–¥-–ø—Ä–æ–≥–Ω–æ–∑")

    # –°–ø–∏—Å–æ–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
    tokens_dict = tokens_dict

    selected_crypto = st.selectbox("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:", list(tokens_dict.keys()))
    interval = st.selectbox("–ò–Ω—Ç–µ—Ä–≤–∞–ª:", ["1m", "5m", "10m"])
    limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∏—Å—Ç–æ—Ä–∏–∏:", 50, 200, 100)


    # –ü–æ–ª—É—á–∞–µ–º (–∏–ª–∏ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º) –¥–∞–Ω–Ω—ã–µ
    symbol = tokens_dict[selected_crypto]
    df = get_historical_data(symbol=symbol, interval=interval, limit=limit)
    df["Close"] = df["price"]

    # –û—Ç—Ä–∏—Å–æ–≤—ã–≤–∞–µ–º –≥—Ä–∞—Ñ–∏–∫
    fig = px.line(df, x="time", y="Close", title=f"{selected_crypto} ({interval})", template="plotly_dark")
    st.plotly_chart(fig, use_container_width=True)

    # –î–µ—Ç–µ–∫—Ç–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
    trend = limit // 20
    detector = TrendDetector(period=trend, target_col="price")
    last_signal = detector.detect_last_signal(df)
    st.subheader("–û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç—Ä–µ–Ω–¥–∞ –∏ —Ä–∞–∑–≤–æ—Ä–æ—Ç–∞")
    st.write(f"–¢–µ–∫—É—â–∏–π —Å–∏–≥–Ω–∞–ª: **{last_signal}**")

    st.write("–û–ø–∏—Å–∞–Ω–∏–µ –ª–æ–≥–∏–∫–∏:")
    st.markdown(f"""
        - **trend_up**: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ ({trend}) –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–π —Ü–µ–Ω—ã –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–µ  
        - **trend_down**: –ø–æ—Å–ª–µ–¥–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ ({trend}) –ø—Ä–∏—Ä–∞—â–µ–Ω–∏–π —Ü–µ–Ω—ã –æ—Ç—Ä–∏—Ü–∞—Ç–µ–ª—å–Ω—ã–µ  
        - **reversal_up**: –±—ã–ª —Ç—Ä–µ–Ω–¥ down, —Ç–µ–ø–µ—Ä—å up  
        - **reversal_down**: –±—ã–ª —Ç—Ä–µ–Ω–¥ up, —Ç–µ–ø–µ—Ä—å down  
        - **flat/none**: –Ω–µ—Ç —è–≤–Ω–æ–≥–æ —Ç—Ä–µ–Ω–¥–∞ –∏–ª–∏ –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö  
        """)

elif tab == "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –ø–æ–∫—É–ø–∫—É/–ø—Ä–æ–¥–∞–∂—É":

    st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ---
    crypto_options = tokens_dict

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ---
    model_options = {
        "Linear Regression": ml_models.AlgorithmLinearRegression,
        "Ridge Regression": ml_models.AlgorithmRidge,
        "Random Forest Regressor": ml_models.AlgorithmRandomForestRegressor,
        "Lasso": ml_models.Lasso,
        "ElasticNet": ml_models.AlgorithmElasticNet,
        "BayesianRidge": ml_models.AlgorithmBayesianRidge,
        "SGD": ml_models.AlgorithmSGDRegressor,
        "DecisionTree": ml_models.AlgorithmDecisionTreeRegressor,
        "RandomForest": ml_models.AlgorithmRandomForestRegressor,
        "ExtraTrees": ml_models.AlgorithmExtraTreesRegressor,
        "GradientBoosting": ml_models.AlgorithmGradientBoostingRegressor
    }

    nn_models = {
        "RNN": nn_model_buy.AlgorithmRNN,
        "LSTM": nn_model_buy.AlgorithmLSTM,
        "GRU": nn_model_buy.AlgorithmGRU,
    }

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã Binance ---
    interval_options = {
        "1 –º–∏–Ω—É—Ç–∞": "1m",
        "5 –º–∏–Ω—É—Ç": "5m",
        "15 –º–∏–Ω—É—Ç": "15m"
    }

    # --- –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –º–æ–¥–µ–ª–∏ ---
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", list(crypto_options.keys()))
    with col2:
        interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:", ["1m", "5m", "15m", "1h", "1d"])
    with col3:
        selected_type_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"]))
    step_pred = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", [1, 5, 10], key="step_pred")
    window_pred = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", [5, 10, 20], key="window_pred")
    if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        models = list(model_options.keys())
    else:
        models = list(nn_models.keys())
    with col4:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", models)


    # --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ---

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
    st.write("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        model = model_options[selected_model]()
    else:
        model = nn_models[selected_model]()

    symbol = crypto_options[selected_crypto]

    st.subheader(f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} ({interval})")
    df = get_crypto_data(symbol, interval)

    if df is not None:
        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        df = df[["open", "high", "low", "close", "volume"]]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å

        # --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
        st.subheader("üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
        # pred_data = df.drop(["volume"], axis=1)
        df_pred = model.predict(df)

        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
        fig, ax = plt.subplots(figsize=(12, 5))
        ax.plot(df_pred.index, df_pred["close"], label="–¶–µ–Ω–∞", color="blue")
        ax.scatter(df_pred.index[df_pred["Signal"] == 1], df_pred["close"][df_pred["Signal"] == 1], color="green",
                   label="üìà –ü–æ–∫—É–ø–∫–∞", marker="^", alpha=1)
        ax.scatter(df_pred.index[df_pred["Signal"] == -1], df_pred["close"][df_pred["Signal"] == -1], color="red",
                   label="üìâ –ü—Ä–æ–¥–∞–∂–∞", marker="v", alpha=1)
        ax.set_title(f"{symbol} ({interval}) - {selected_model}")
        ax.set_xlabel("–í—Ä–µ–º—è")
        ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
        ax.legend()
        st.pyplot(fig)

        # --- –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
        last_signal = df_pred["Signal"].iloc[-1]
        if last_signal == 1:
            recommendation = "üìà **–ü–æ–∫—É–ø–∫–∞**"
            recommendation_color = "green"
        elif last_signal == -1:
            recommendation = "üìâ **–ü—Ä–æ–¥–∞–∂–∞**"
            recommendation_color = "red"
        else:
            recommendation = "‚è≥ **–î–µ—Ä–∂–∏—Ç–µ**"
            recommendation_color = "gray"
        st.markdown(f"<h2 style='color: {recommendation_color}; text-align: center;'>{recommendation}</h2>",
                                        unsafe_allow_html=True)
        st.subheader(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {selected_model}: **{recommendation}**")
    # ohlc_data = get_crypto_ohlc(symbol, interval)
    #
    # if ohlc_data:
    #     st.write(f"**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –¥–∞–Ω–Ω—ã–µ {selected_crypto} ({selected_interval}):**")
    #     st.write(pd.DataFrame([ohlc_data]))
    #
    #
    #
    #     if model:
    #         # –°–æ–∑–¥–∞–µ–º DataFrame —Å OHLC –¥–∞–Ω–Ω—ã–º–∏
    #         X = pd.DataFrame(ohlc_data)
    #         y_pred = model.predict(X)
    #         if y_pred == 1:
    #             recommendation = "üìà **–ü–æ–∫—É–ø–∫–∞**"
    #             recommendation_color = "green"
    #         elif y_pred == 0:
    #             recommendation = "üìâ **–ü—Ä–æ–¥–∞–∂–∞**"
    #             recommendation_color = "red"
    #         else:
    #             recommendation = "‚è≥ **–î–µ—Ä–∂–∏—Ç–µ**"
    #             recommendation_color = "gray"
    #
    #         # with recommendation_container:
    #         st.markdown(f"<h2 style='color: {recommendation_color}; text-align: center;'>{recommendation}</h2>",
    #                     unsafe_allow_html=True)
    #
    #         # –í—ã–≤–æ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–æ–π —Ü–µ–Ω—ã
    #         st.subheader(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {selected_model}: **{recommendation}**")
    # else:
    #     st.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö —Å Binance API. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

elif tab == "üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã":
    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ---
    ALGORITHMS = {
        # "Moving Average": algorithms.AlgorithmA(),
        "RSI": algorithms.AlgorithmRSI,
        "SMA": algorithms.AlgorithmSMA,
        "EMA": algorithms.AlgorithmEMA,
        "MACD": algorithms.AlgorithmMACD,
        "ADX": algorithms.AlgorithmADX,
        # "Ichimoku": algorithms.AlgorithmIchimoku,
        # "CCI": algorithms.AlgorithmCCI,
        "Stochastic": algorithms.AlgorithmStochastic,
        "WilliamsR": algorithms.AlgorithmWilliamsR,
        "OBV": algorithms.AlgorithmOBV,
        "VMAP": algorithms.AlgorithmVWAP,
        "BollingerBands": algorithms.AlgorithmBollingerBands,
        "ATR": algorithms.AlgorithmATR,
        "ARIMA": algorithms.AlgorithmARIMA,
        # "SARIMA": algorithms.AlgorithmSARIMA
    }

    # --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
    st.title("üìà Crypto Trading Predictor")

    # --- –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ---
    symbols = tokens
    symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", symbols, index=symbols.index("BTCUSDT"))
    interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª", ["1m", "5m", "15m", "1h", "1d"], index=0)
    selected_algorithm = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º", list(ALGORITHMS.keys()))

    st.subheader(f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} ({interval})")
    df = get_crypto_data(symbol, interval)
    df["Close"] = df["close"]
    algorithm = ALGORITHMS[selected_algorithm]()
    df = algorithm.run(df)
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")

    if selected_algorithm == "SMA":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers, index=numbers.index(5))
        algorithm.get_param(int(window_param))
    elif selected_algorithm == "RSI":
        numbers = [ii for ii in range(10, 40, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers, index=numbers.index(15))
        algorithm.get_param(int(window_param))
    elif selected_algorithm == "EMA":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        algorithm.get_param(int(window_param))
    elif selected_algorithm == "MACD":
        nums_1 = [ii for ii in range(1, 10, 1)]
        nums_2 = [ii for ii in range(11, 20, 1)]
        fastperiod = st.selectbox("Fast Peiod", nums_1)
        slowperiod = st.selectbox("Slow Peiod", nums_2)
        algorithm.get_param(fastperiod=int(fastperiod), slowperiod=int(slowperiod))
    elif selected_algorithm == "ADX":
        numbers = [ii for ii in range(5, 30, 1)]
        period_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        algorithm.get_param(int(period_param))
    elif selected_algorithm == "Ichimoku":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        # algorithm.get_param(int(window_param))
    elif selected_algorithm == "CCI":
        pass
    elif selected_algorithm == "Stochastic":
        k_nums = [ii for ii in range(10, 20, 1)]
        d_nums = [ii for ii in range(1, 10, 1)]
        k_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", k_nums)
        d_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", d_nums)
        algorithm.get_param(k_period=int(k_param), d_period=int(d_param))
    elif selected_algorithm == "WilliamsR":
        numbers = [ii for ii in range(5, 20, 1)]
        window_param = st.selectbox("–ü–µ—Ä–∏–æ–¥", numbers)
        algorithm.get_param(period=int(window_param))
    elif selected_algorithm == "OBV":
        st.write("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã.")
    elif selected_algorithm == "VMAP":
        st.write("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã.")
    elif selected_algorithm == "BollingerBands":
        step = 0.1
        num_1 = [ii for ii in range(5, 30, 1)]
        num_2 = [round(ii*step, 1) for ii in range(int(0.1/step), int(5.0/step))]
        num_3 = [round(ii*step, 1) for ii in range(int(0.1/step), int(5.0/step))]
        window = st.selectbox("–ü–µ—Ä–∏–æ–¥ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π", num_1)
        nbdev_up = st.selectbox("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã", num_2, index=num_2.index(2.0))
        nbdev_dn = st.selectbox("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã", num_3, index=num_3.index(2.0))
        algorithm.get_param(window=window, nbdev_up=nbdev_up, nbdev_dn=nbdev_dn)
    elif selected_algorithm == "ATR":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–ü–µ—Ä–∏–æ–¥", numbers)
        algorithm.get_param(period=int(window_param))
    elif selected_algorithm == "ARIMA":
        num_1 = [ii for ii in range(1, 5)]
        num_2 = [ii for ii in range(0, 5)]
        num_3 = [ii for ii in range(1, 5)]
        pp = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ –∞–≤—Ç–æ—Ä–µ–≥—Ä–µ—Å—Å–∏–∏", num_1)
        dd = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è", num_2)
        qq = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ", num_3)
        algorithm.get_param(p=pp, d=dd, q=qq)
    elif selected_algorithm == "SARIMA":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        # algorithm.get_param(int(window_param))
    df = algorithm.run(df)
    # print(df)
    # --- –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---

    if df is not None:
        # --- –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ---
        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
        fig, (ax, ax_ind) = plt.subplots(2, 1, figsize=(12, 8))
        ax.plot(df["time"], df["close"], label="–¶–µ–Ω–∞", color="blue")

        if selected_algorithm == "SMA":
            # –î–æ–ø—É—Å—Ç–∏–º, —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö —Ü–µ–Ω—ã
            ax.plot(df["time"], df["SMA"], label="SMA", color="orange", linewidth=2)
            ax_ind.set_visible(False)  # –Ω–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å
        elif selected_algorithm == "EMA":
            # –î–æ–ø—É—Å—Ç–∏–º, —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö —Ü–µ–Ω—ã
            ax.plot(df["time"], df["EMA"], label="SMA", color="orange", linewidth=2)
            ax_ind.set_visible(False)  # –Ω–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å
        elif selected_algorithm == "MACD":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω–∞ ax_ind –≤—ã–≤–æ–¥–∏–º MACD, —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            print(df)
            ax_ind.plot(df["time"], df["MACD"], label="MACD", color="purple")
            ax_ind.plot(df["time"], df["Signal_line"], label="MACD_signal", color="red", linestyle="--")
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–∏–∫–∞–º–∏
            # ax_ind.bar(df["time"], df["MACD_Hist"], label="Histogram", color="gray")
            ax_ind.set_ylabel("MACD")
            ax_ind.legend()
            ax_ind.grid(True)
        elif selected_algorithm == "RSI":
            ax_ind.plot(df["time"], df["RSI"], label="RSI", color="purple", linewidth=1)
            ax_ind.axhline(30, color='red', linestyle='--', label="–£—Ä–æ–≤–µ–Ω—å 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
            ax_ind.axhline(70, color='green', linestyle='--', label="–£—Ä–æ–≤–µ–Ω—å 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
        elif selected_algorithm == "MACD":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω–∞ ax_ind –≤—ã–≤–æ–¥–∏–º MACD, —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            ax_ind.plot(df["time"], df["MACD"], label="MACD", color="purple")
            ax_ind.plot(df["time"], df["MACD_signal"], label="MACD_signal", color="red", linestyle="--")
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–∏–∫–∞–º–∏
            ax_ind.bar(df["time"], df["MACD_histogram"], label="Histogram", color="gray")
            ax_ind.set_ylabel("MACD")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "ADX":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü df["ADX"]
            # ax_ind.plot(df["time"], df["ADX"], label="ADX", color="green")
            # ax_ind.plot(df["time"], df["DX"], label="ADX", color="blue")
            ax_ind.plot(df["time"], df["-DI"], label="Bear", color="red")
            ax_ind.plot(df["time"], df["+DI"], label="Ox", color="yellow")
            ax_ind.set_ylabel("ADX")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "Ichimoku":
            # –£ Ichimoku –æ–±—ã—á–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π
            ax_ind.plot(df["time"], df["Tenkan_sen"], label="Conversion", color="orange")
            ax_ind.plot(df["time"], df["Kijun_sen"], label="Base", color="blue")
            ax_ind.plot(df["time"], df["Senkou_Span_A"], label="Lead1", color="green")
            ax_ind.plot(df["time"], df["Senkou_Span_B"], label="Lead2", color="red")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å "–æ–±–ª–∞–∫–∞" (fill_between)
            ax_ind.set_ylabel("Ichimoku")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "CCI":
            ax_ind.plot(df["time"], df["CCI"], label="CCI", color="brown")
            ax_ind.axhline(100, color='grey', linestyle='--')
            ax_ind.axhline(-100, color='grey', linestyle='--')
            ax_ind.set_ylabel("CCI")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "Stochastic":
            ax_ind.plot(df["time"], df["%D"], label="Stochastic %K", color="magenta")
            # –î–æ–ø—É—Å—Ç–∏–º, –µ—Å—Ç—å df["Stochastic_signal"] - –ª–∏–Ω–∏—è %D
            # ax_ind.plot(df["time"], df["Signal"], label="Stochastic %D", color="black", linestyle="--")
            ax_ind.set_ylabel("Stochastic")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "WilliamsR":
            ax_ind.plot(df["time"], df["%R"], label="Williams %R", color="violet")
            ax_ind.axhline(-20, color='red', linestyle='--')  # –∑–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
            ax_ind.axhline(-80, color='green', linestyle='--')
            ax_ind.set_ylabel("Williams %R")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "OBV":
            ax_ind.plot(df["time"], df["OBV"], label="OBV", color="teal")
            ax_ind.set_ylabel("OBV")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "VMAP":
            # –û–±—ã—á–Ω–æ VWAP —Ä–∏—Å—É–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö —Ü–µ–Ω—ã
            ax.plot(df["time"], df["VWAP"], label="VWAP", color="purple", linewidth=1.5)
            # ax.plot(df["time"], df["VWAP"], label="VWAP", color="purple", linewidth=2.5)
            ax_ind.set_visible(False)

        elif selected_algorithm == "BollingerBands":
            # "–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º" –Ω–∞ —Ü–µ–Ω—É
            ax.plot(df["time"], df["Boll_Upper"], label="Upper Band", color="green", linestyle="--")
            ax.plot(df["time"], df["Boll_Middle"], label="Middle Band", color="orange", linestyle="-")
            ax.plot(df["time"], df["Boll_Lower"], label="Lower Band", color="red", linestyle="--")
            ax_ind.set_visible(False)

        elif selected_algorithm == "ATR":
            ax_ind.plot(df["time"], df["ATR"], label="ATR", color="darkcyan")
            ax_ind.set_ylabel("ATR")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "ARIMA":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü df["ARIMA_pred"] ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã
            ax.plot(df["time"], df["ARIMA_Fitted"], label="ARIMA Prediction", color="darkred", linestyle="--")
            ax_ind.set_visible(False)

        elif selected_algorithm == "SARIMA":
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ARIMA, —Å—Ç–æ–ª–±–µ—Ü df["SARIMA_pred"]
            ax_ind.plot(df["time"], df["SARIMA_Fitted"], label="SARIMA Prediction", color="darkblue", linestyle="--")
            ax_ind.set_visible(True)

        ax.scatter(df["time"][df["Signal"] == 1], df["close"][df["Signal"] == 1], color="green", label="–ü–æ–∫—É–ø–∫–∞",
                   marker="^", alpha=1)
        ax.scatter(df["time"][df["Signal"] == -1], df["close"][df["Signal"] == -1], color="red", label="–ü—Ä–æ–¥–∞–∂–∞",
                   marker="v", alpha=1)
        ax.set_title(f"{symbol} ({interval})")
        ax.set_xlabel("–í—Ä–µ–º—è")
        ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
        ax.legend()
        st.pyplot(fig)

        # --- –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
        last_signal = df["Signal"].iloc[-1]
        if last_signal == 1:
            st.success("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–∫—É–ø–∞—Ç—å!")
        elif last_signal == -1:
            st.error("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–≤–∞—Ç—å!")
        else:
            st.info("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–µ—Ä–∂–∞—Ç—å (–±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞).")

elif tab == "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É":
    st.title("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ–º")

    # –ü—Ä–∏–º–µ—Ä —Å–ø–∏—Å–∫–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤
    crypto_options = tokens_dict
    intervals = ["1m", "5m", "10m"]

    model_options = {
        "Linear Regression": ml_model_price.AlgorithmLinearRegression,
        "Ridge Regression": ml_model_price.AlgorithmRidge,
        "Random Forest Regressor": ml_model_price.AlgorithmRandomForestRegressor,
        "Lasso": ml_model_price.Lasso,
        "ElasticNet": ml_model_price.AlgorithmElasticNet,
        "BayesianRidge": ml_model_price.AlgorithmBayesianRidge,
        "SGD": ml_model_price.AlgorithmSGDRegressor,
        "DecisionTree": ml_model_price.AlgorithmDecisionTreeRegressor,
        "RandomForest": ml_model_price.AlgorithmRandomForestRegressor,
        "ExtraTrees": ml_model_price.AlgorithmExtraTreesRegressor,
        "GradientBoosting": ml_model_price.AlgorithmGradientBoostingRegressor
    }

    nn_models = {
        "RNN": nn_model_price.AlgorithmRNN,
        "LSTM": nn_model_price.AlgorithmLSTM,
        "GRU": nn_model_price.AlgorithmGRU,
    }

    # –í—ã–±–æ—Ä
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", list(crypto_options.keys()))
    with col2:
        interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:", intervals)
    with col3:
        selected_type_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"]))
    step_pred = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–≥ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", [1, 5, 10], key="step_pred")
    window_pred = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫–Ω–æ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è:", [5, 10, 20], key="window_pred")
    if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        models = list(model_options.keys())
    else:
        models = list(nn_models.keys())
    with col4:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", models)

    st.write("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å
    if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
        model = model_options[selected_model]()
    else:
        model = nn_models[selected_model]()

    symbol = crypto_options[selected_crypto]

    st.subheader(f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} ({interval})")
    df = get_crypto_data(symbol, interval)

    st.subheader(f"–ì—Ä–∞—Ñ–∏–∫ {selected_crypto} ({interval}): –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–µ —Å —à–∞–≥–æ–º {step_pred}")
    df1 = model.predict(data=df)

    # –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ –Ω–∞ –æ–¥–Ω–æ–º —Ä–∏—Å—É–Ω–∫–µ
    fig = go.Figure()

    st.subheader(f"–ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {round(df1.iloc[-1]['PredictedValue'], 4)}")

    # –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞ (–ª–∏–Ω–∏—è)
    fig.add_trace(go.Scatter(
        x=df["time"],
        y=df["close"],
        mode="lines",
        name="Close (–§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è)",
        line=dict(color="blue")
    ))

    # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ (–ª–∏–Ω–∏—è)
    fig.add_trace(go.Scatter(
        x=df1["time"],
        y=df1["PredictedValue"],
        mode="lines",
        name="PredictedPrice",
        line=dict(color="red")
    ))

    fig.update_layout(
        title=f"{crypto_options[selected_crypto]} Price vs Predicted (interval: {interval})",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="–¶–µ–Ω–∞ (USDT)",
        template="plotly_dark"
    )

    st.plotly_chart(fig, use_container_width=True)
    # NEURAL_NETWORKS = {
    #     "RNN": AlgorithmRNN(),
    #     "LSTM": AlgorithmLSTM(),
    #     "GRU": AlgorithmGRU(),
    # }
    # NEURAL_NETWORKS = {
    #     "RNN": nn_model_buy.AlgorithmRNN(),
    #     "LSTM": nn_model_buy.AlgorithmLSTM(),
    #     "GRU": nn_model_buy.AlgorithmGRU(),
    # }
    #
    # # --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
    # st.title("ü§ñ AI Crypto Trading Predictor (Neural Networks)")
    #
    # # --- –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –º–æ–¥–µ–ª–∏ ---
    # symbols = tokens
    # selected_symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", symbols, index=symbols.index("BTCUSDT"))
    # selected_nn = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –Ω–µ–π—Ä–æ–Ω–Ω—É—é —Å–µ—Ç—å", list(NEURAL_NETWORKS.keys()))
    # selected_interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª", ["1m", "5m", "15m", "1h", "1d"], index=0)
    #
    # # --- –ó–∞–ø—Ä–æ—Å –¥–∞–Ω–Ω—ã—Ö ---
    # st.subheader(f"üìä –ì—Ä–∞—Ñ–∏–∫ {selected_symbol} ({selected_interval})")
    # df = get_crypto_data(selected_symbol, selected_interval)
    # print(df.head())
    #
    # if df is not None:
    #     # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
    #     df = df[["open", "high", "low", "close", "volume"]]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞
    #     model = NEURAL_NETWORKS[selected_nn]  # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
    #
    #     # --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
    #     st.subheader("üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
    #     # pred_data = df.drop(["volume"], axis=1)
    #     df_pred = model.predict(df)
    #
    #     # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
    #     fig, ax = plt.subplots(figsize=(12, 5))
    #     ax.plot(df_pred.index, df_pred["close"], label="–¶–µ–Ω–∞", color="blue")
    #     ax.scatter(df_pred.index[df_pred["Signal"] == 1], df_pred["close"][df_pred["Signal"] == 1], color="green",
    #                label="üìà –ü–æ–∫—É–ø–∫–∞", marker="^", alpha=1)
    #     ax.scatter(df_pred.index[df_pred["Signal"] == -1], df_pred["close"][df_pred["Signal"] == -1], color="red",
    #                label="üìâ –ü—Ä–æ–¥–∞–∂–∞", marker="v", alpha=1)
    #     ax.set_title(f"{selected_symbol} ({selected_interval}) - {selected_nn}")
    #     ax.set_xlabel("–í—Ä–µ–º—è")
    #     ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
    #     ax.legend()
    #     st.pyplot(fig)
    #
    #     # --- –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
    #     last_signal = df_pred["Signal"].iloc[-1]
    #     if last_signal == 1:
    #         st.success("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–∫—É–ø–∞—Ç—å!")
    #     elif last_signal == -1:
    #         st.error("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–≤–∞—Ç—å!")
    #     else:
    #         st.info("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–µ—Ä–∂–∞—Ç—å (–±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞).")
