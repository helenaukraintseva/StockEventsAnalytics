import streamlit as st
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import random

# === –ò–ú–ò–¢–ê–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í ===
def get_signals(crypto: str, model: str):
    now = datetime.now()
    signals = []
    for i in range(15):
        signal_time = now - timedelta(minutes=random.randint(1, 2880))  # –¥–æ 2 —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥
        signal_price = round(random.uniform(1000, 3000), 2)
        current_price = signal_price + round(random.uniform(-50, 50), 2)
        delta = current_price - signal_price

        duration = now - signal_time
        hours = duration.total_seconds() / 3600

        # –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
        if hours < 1:
            signal_type = "–ö–æ—Ä–æ—Ç–∫–∞—è"
        elif hours < 12:
            signal_type = "–°—Ä–µ–¥–Ω—è—è"
        else:
            signal_type = "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è"

        # –°–∏–≥–Ω–∞–ª
        signal_action = "–ü–æ–∫—É–ø–∞—Ç—å" if delta > 0 else "–ü—Ä–æ–¥–∞–≤–∞—Ç—å"

        # –ó–∞–∫—Ä—ã—Ç–∞ –ª–∏ —Å–¥–µ–ª–∫–∞?
        is_closed = duration.total_seconds() > 1800  # –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç

        signals.append({
            "–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞": signal_time,
            "–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞": signal_type,
            "–°–∏–≥–Ω–∞–ª": signal_action,
            "–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞": signal_price,
            "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞": current_price,
            "–†–∞–∑–Ω–∏—Ü–∞": delta,
            "–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞": is_closed
        })
    return pd.DataFrame(signals)

# === –ù–ê–°–¢–†–û–ô–ö–ò STREAMLIT ===
st.set_page_config(page_title="–°–∏–≥–Ω–∞–ª—ã –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º", layout="wide")
st.title("üì° –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

# --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
cryptos = ["Bitcoin", "Ethereum", "Solana", "BNB"]
models = ["Strategy A", "Strategy B", "Strategy C"]

col1, col2 = st.columns(2)
with col1:
    selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", cryptos)
with col2:
    selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", models)

show_closed = st.checkbox("üîì –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏", value=False)

# --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
st.subheader(f"üìã –°–∏–≥–Ω–∞–ª—ã –ø–æ {selected_crypto} —Å –º–æ–¥–µ–ª—å—é {selected_model}")
df = get_signals(selected_crypto, selected_model)

# --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
if not show_closed:
    df = df[df["–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞"] == False]

# --- –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ ---
def highlight_signal(row):
    # –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–†–∞–∑–Ω–∏—Ü–∞"
    if row["–†–∞–∑–Ω–∏—Ü–∞"] > 0:
        return [''] * 5 + ['background-color: green; color: white']
    elif row["–†–∞–∑–Ω–∏—Ü–∞"] < 0:
        return [''] * 5 + ['background-color: red; color: white']
    else:
        return [''] * 5 + ['background-color: white; color: black']

# --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è) ---
df["–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞"] = df["–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞"].dt.strftime("%Y-%m-%d %H:%M")

# --- –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã ---
styled_df = df[[
    "–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞", "–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞", "–°–∏–≥–Ω–∞–ª", "–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞",
    "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", "–†–∞–∑–Ω–∏—Ü–∞"
]].style.apply(highlight_signal, axis=1)

st.dataframe(styled_df, use_container_width=True)
