import streamlit as st
import pandas as pd
import requests
import numpy as np
from datetime import datetime, timedelta
import random
from settings import tokens, tokens_dict
from config import api_id, api_hash, phone

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç—Ä–∞–Ω–∏—Ü—ã ---
st.set_page_config(page_title="–ö—Ä–∏–ø—Ç–æ-–≥—Ä–∞—Ñ–∏–∫ –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞", layout="wide")
st.session_state.retriever = None

st.title("üìä –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥")

# --- –ë–æ–∫–æ–≤–æ–µ –º–µ–Ω—é —Å –≤–∫–ª–∞–¥–∫–∞–º–∏ ---
tab = st.sidebar.radio("–ú–µ–Ω—é:", ["üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é",
                                 "üìà –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç",
                                 # "üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞",
                                 "üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ",
                                 "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É",
                                 "üìä –ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞",
                                 "üìä –°–∏–≥–Ω–∞–ª—ã",
                                 "üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã",
                                 "üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π",
                                 "üìä Crypto RAG",
                                 ])

# --- –•—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –≤ —Å–µ—Å—Å–∏–∏ ---
if "price_history" not in st.session_state:
    st.session_state.price_history = {}

if tab == "üìä –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":

    st.markdown("# üß† CryptoInsight")
    st.markdown("### –ê–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∞—è –ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∏ –æ—Ü–µ–Ω–∫–∏ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω–æ–≥–æ —Ä—ã–Ω–∫–∞ –≤ —Ä–µ–∞–ª—å–Ω–æ–º –≤—Ä–µ–º–µ–Ω–∏.")
    st.markdown("---")
    st.markdown("üîç –û—Ç—Å–ª–µ–∂–∏–≤–∞–π—Ç–µ —Ç—Ä–µ–Ω–¥—ã, –∏–∑—É—á–∞–π—Ç–µ –ø–æ–≤–µ–¥–µ–Ω–∏–µ —Ä—ã–Ω–∫–∞ –∏ –ø—Ä–∏–Ω–∏–º–∞–π—Ç–µ –æ–±–æ—Å–Ω–æ–≤–∞–Ω–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö.")
# --- –í–∫–ª–∞–¥–∫–∞ "–ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç" ---
elif tab == "üìà –ì—Ä–∞—Ñ–∏–∫ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç":
    import plotly.express as px
    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ---
    crypto_options = tokens_dict
    st.subheader("‚öô –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥—Ä–∞—Ñ–∏–∫–∞")

    def get_crypto_price(symbol):
        url = f"https://api.binance.com/api/v3/ticker/price?symbol={symbol}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()
            return float(data["price"])
        except requests.exceptions.RequestException:
            return None


    def get_historical_data(symbol, interval="1m", limit=100):
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            df = pd.DataFrame(data,
                              columns=["time", "Open", "High", "Low", "price", "Volume", "_", "_", "_", "_", "_", "_"])
            df = df[["time", "price"]]
            df["time"] = pd.to_datetime(df["time"], unit="ms") + pd.Timedelta(hours=3)
            df["price"] = df["price"].astype(float)
            return df
        except requests.exceptions.RequestException:
            return None

    col1, col2 = st.columns(2)
    with col1:
        selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", list(crypto_options.keys()), key="crypto_graph")

    with col2:
        update_interval = st.selectbox("–ß–∞—Å—Ç–æ—Ç–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–º–∏–Ω):", [1, 5, 10, 15, 30], key="interval_graph")

    if "price_history" not in st.session_state:
        st.session_state.price_history = {}

    if selected_crypto not in st.session_state.price_history:
        st.session_state.price_history[selected_crypto] = []

    placeholder = st.empty()
    if len(st.session_state.price_history[selected_crypto]) < 100:
        st.write("üîÑ –°–æ–±–∏—Ä–∞–µ–º –¥–∞–Ω–Ω—ã–µ...")
        historical_data = get_historical_data(crypto_options[selected_crypto])

        if historical_data is not None:
            # –î–æ–±–∞–≤–ª—è–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ –≤ session_state
            st.session_state.price_history[selected_crypto] = historical_data.to_dict("records")


    # --- –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ ---
    @st.cache_data(ttl=60)
    def load_historical_data(symbol):
        return get_historical_data(symbol)


    symbol = crypto_options[selected_crypto]
    df = load_historical_data(symbol)

    # --- –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —Ü–µ–Ω—É ---
    current_price = get_crypto_price(symbol)
    if current_price and df is not None:
        now = pd.Timestamp.now()
        new_row = pd.DataFrame([{"time": now, "price": current_price}])
        df = pd.concat([df, new_row], ignore_index=True)
        df = df.tail(100)  # –û–±—Ä–µ–∑–∞–µ–º, —á—Ç–æ–±—ã –Ω–µ —Ä–∞–∑—Ä–∞—Å—Ç–∞–ª–æ—Å—å

        # --- –ì—Ä–∞—Ñ–∏–∫ ---
        fig = px.line(df, x="time", y="price", title=f"–ì—Ä–∞—Ñ–∏–∫ {selected_crypto}",
                      labels={"time": "–í—Ä–µ–º—è", "price": "–¶–µ–Ω–∞ (USDT)"}, template="plotly_dark")
        st.plotly_chart(fig, use_container_width=True)
    else:
        st.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å Binance")

elif tab == "üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ":
    st.title("üìà –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫ –∏ —Ç—Ä–µ–Ω–¥-–ø—Ä–æ–≥–Ω–æ–∑")
    from ta.trend import MACD
    from ta.momentum import RSIIndicator
    import plotly.graph_objects as go

    tokens_dict = {
        "BTC/USDT": "BTCUSDT",
        "ETH/USDT": "ETHUSDT",
        "BNB/USDT": "BNBUSDT"
    }

    selected_crypto = st.selectbox("–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞:", list(tokens_dict.keys()))
    interval = st.selectbox("–ò–Ω—Ç–µ—Ä–≤–∞–ª:", ["1m", "5m", "10m"])
    limit = st.slider("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ—á–µ–∫ –∏—Å—Ç–æ—Ä–∏–∏:", 50, 200, 100)


    # –£–ª—É—á—à–µ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞
    def detect_trend_signals(df, trend_window):
        df = df.copy()
        df["ema"] = df["price"].ewm(span=trend_window, adjust=False).mean()
        df["diff"] = df["ema"].diff()
        df["volatility"] = df["price"].rolling(window=trend_window).std()
        df["signal_strength"] = df["diff"] / df["volatility"]

        recent_strength = df["signal_strength"].tail(trend_window)
        avg_strength = recent_strength.mean()

        if abs(avg_strength) < 0.1:
            signal = "flat"
        elif avg_strength > 0.1:
            signal = "trend_up"
        elif avg_strength < -0.1:
            signal = "trend_down"
        else:
            signal = "none"

        macd = MACD(close=df["price"]).macd()
        rsi = RSIIndicator(close=df["price"]).rsi()

        last_macd = macd.iloc[-1]
        last_rsi = rsi.iloc[-1]

        if signal == "trend_down" and last_rsi < 30:
            signal = "reversal_up"
        elif signal == "trend_up" and last_rsi > 70:
            signal = "reversal_down"

        return signal, df


    def get_historical_data(symbol, interval="1m", limit=100):
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={limit}"
        try:
            response = requests.get(url)
            response.raise_for_status()
            data = response.json()

            df = pd.DataFrame(data,
                              columns=["time", "Open", "High", "Low", "price", "Volume", "_", "_", "_", "_", "_", "_"])
            df = df[["time", "price"]]
            df["time"] = pd.to_datetime(df["time"], unit="ms") + pd.Timedelta(hours=3)
            df["price"] = df["price"].astype(float)
            return df
        except requests.exceptions.RequestException:
            return None

    symbol = tokens_dict[selected_crypto]
    df = get_historical_data(symbol=symbol, interval=interval, limit=limit)
    df["Close"] = df["price"]

    trend_window = max(5, limit // 20)
    trend_signal, df = detect_trend_signals(df, trend_window)

    colors = {
        "trend_up": "green",
        "trend_down": "red",
        "reversal_up": "blue",
        "reversal_down": "orange",
        "flat": "gray",
        "none": "white"
    }

    fig = go.Figure()
    fig.add_trace(go.Scatter(
        x=df["time"],
        y=df["price"],
        mode="lines",
        name="–¶–µ–Ω–∞",
        line=dict(color=colors.get(trend_signal, "white"))
    ))

    fig.update_layout(
        title=f"{selected_crypto} ({interval}) ‚Äî —Ç—Ä–µ–Ω–¥: {trend_signal}",
        template="plotly_dark",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="–¶–µ–Ω–∞"
    )
    st.plotly_chart(fig, use_container_width=True)

    st.subheader("üìä –¢—Ä–µ–Ω–¥:")
    st.metric("–°–∏–≥–Ω–∞–ª", trend_signal)

    st.write("üìò –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç—Ä–µ–Ω–¥–∞:")
    st.markdown(f"""
    - –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è **EMA({trend_window})**, –≤–æ–ª–∞—Ç–∏–ª—å–Ω–æ—Å—Ç—å –∏ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ
    - –ò—Å–ø–æ–ª—å–∑—É—é—Ç—Å—è —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã: **MACD**, **RSI**
    - **trend_up**: —É—Å—Ç–æ–π—á–∏–≤—ã–π —Ä–æ—Å—Ç + –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è –ø—Ä–æ–∏–∑–≤–æ–¥–Ω–∞—è > 0
    - **trend_down**: —É—Å—Ç–æ–π—á–∏–≤–æ–µ –ø–∞–¥–µ–Ω–∏–µ
    - **flat**: –Ω–µ—Ç —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω–Ω–æ–≥–æ –¥–≤–∏–∂–µ–Ω–∏—è
    - **reversal_up / down**: —Ä–∞–∑–≤–æ—Ä–æ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ RSI
    """)

elif tab == "üìä –ü–æ–∫—É–ø–∫–∞/–ø—Ä–æ–¥–∞–∂–∞":
    import joblib

    st.title("üìä –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∫—É–ø–∫–∏/–ø—Ä–æ–¥–∞–∂—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã ---
    crypto_options = tokens_dict

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥–µ–ª–∏ ---
    MODEL_DIR = "models/"
    # MODEL_DIR = "trained_signal_models_3/"


    def get_crypto_data(symbol, interval="1m", window_size=20, forecast_horizon=100, reserve_steps=50):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance API.

        :param symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT"
        :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π ("1m", "5m", –∏ —Ç.–ø.)
        :param window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20)
        :param forecast_horizon: –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä—ë–¥ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)
        :param reserve_steps: –ó–∞–ø–∞—Å —à–∞–≥–æ–≤ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)
        :return: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ time, open, high, low, close, volume
        """
        total_needed = window_size + forecast_horizon + reserve_steps
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={total_needed}"

        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()

            df = pd.DataFrame(data, columns=[
                "time", "open", "high", "low", "close", "volume",
                "_1", "_2", "_3", "_4", "_5", "_6"
            ])

            df = df[["time", "open", "high", "low", "close", "volume"]]
            df["time"] = pd.to_datetime(df["time"], unit="ms")
            df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(
                float)
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")
            return pd.DataFrame()
    @st.cache_resource
    def load_ml_model(name):
        name = name.replace(" ", "")
        return joblib.load(f"{MODEL_DIR}{name}_signal.pkl")

    # === –°–ª–æ–≤–∞—Ä—å —Å –ø—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–º–∏ ML-–º–æ–¥–µ–ª—è–º–∏ ===
    model_options = {
        "AdaBoost": "AdaBoost",
        "Decision Tree": "DecisionTree",
        "GaussianNB": "GaussianNB",
        "GradientBoosting": "GradientBoosting",
        "KNN": "KNN",
        "Logistic Regression": "LogisticRegression",
        "Random Forest": "RandomForest",
    }

    # === –ü—Ä–µ–¥–æ–±—É—á–µ–Ω–Ω—ã–µ PyTorch –º–æ–¥–µ–ª–∏ ===
    input_size = 5

    # –°–ª–æ–≤–∞—Ä—å —Å –∫–ª–∞—Å—Å–∞–º–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π
    nn_classes = {
        "RNN": "",
        "LSTM": "",
        "GRU": "",
    }

    # –°–ª–æ–≤–∞—Ä—å —Å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –º–æ–¥–µ–ª—è–º–∏

    # === –ó–∞–≥—Ä—É–∂–∞–µ–º scaler –æ—Ç–¥–µ–ª—å–Ω–æ, –µ—Å–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ===
    scaler = joblib.load(MODEL_DIR + "scaler_signal.pkl")

    # --- –î–æ—Å—Ç—É–ø–Ω—ã–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª—ã Binance ---
    interval_options = {
        "1 –º–∏–Ω—É—Ç–∞": "1m",
        "5 –º–∏–Ω—É—Ç": "5m",
        "15 –º–∏–Ω—É—Ç": "15m"
    }

    # --- –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã, –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –∏ –º–æ–¥–µ–ª–∏ ---
    col1, col2, col3, col4 = st.columns(4)
    with col1:
        selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É:", list(crypto_options.keys()))
    with col2:
        interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª:", ["1m", "5m", "15m", "1h", "1d"])
    with col3:
        selected_type_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", list(["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"]))
    # if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
    models = list(model_options.keys())
    # else:
    #     models = list(nn_classes.keys())
    with col4:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å:", models)
    # if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ":
    model = load_ml_model(selected_model)
    # else:
    #     model = load_nn_model(selected_model)

    # --- –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ ---

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
    st.write("üîÑ –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª—å

    symbol = crypto_options[selected_crypto]

    st.subheader(f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} ({interval})")
    df = get_crypto_data(symbol, interval)
    df = df.drop('time', axis=1)
    def build_windowed_features(df, window_size=20):
        features = []
        for i in range(len(df) - window_size + 1):
            window = df.iloc[i:i + window_size].values.flatten()
            features.append(window)
        return pd.DataFrame(features)

    if df is not None:
        import matplotlib.pyplot as plt
        # --- –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö ---
        df = df[["open", "high", "low", "close", "volume"]]  # –ò—Å–ø–æ–ª—å–∑—É–µ–º 4 –ø–∞—Ä–∞–º–µ—Ç—Ä–∞  # –í—ã–±–∏—Ä–∞–µ–º –Ω–µ–π—Ä–æ—Å–µ—Ç—å
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—É—é –∫–æ–ø–∏—é –¥–ª—è –≥—Ä–∞—Ñ–∏–∫–∞
        df_display = df.copy()
        df = build_windowed_features(df, window_size=20)
        # --- –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ ---
        st.subheader("üìà –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ")
        X_scaled = df
        # X_scaled = scaler.transform(df)

        y_pred = model.predict(X_scaled)

        df_pred = df_display.iloc[-len(y_pred):].copy()
        df_pred["Signal"] = y_pred

        # --- –ü–æ—Å—Ç—Ä–æ–µ–Ω–∏–µ –≥—Ä–∞—Ñ–∏–∫–∞ ---
        fig, ax = plt.subplots(figsize=(12, 5))
        ax.plot(df_pred.index, df_pred["close"], label="–¶–µ–Ω–∞", color="blue")
        ax.scatter(df_pred.index[df_pred["Signal"] == 1], df_pred["close"][df_pred["Signal"] == 1], color="green",
                   label="üìà –ü–æ–∫—É–ø–∫–∞", marker="^", alpha=1)
        ax.scatter(df_pred.index[df_pred["Signal"] == -1], df_pred["close"][df_pred["Signal"] == -1], color="red",
                   label="üìâ –ü—Ä–æ–¥–∞–∂–∞", marker="v", alpha=1)
        ax.set_title(f"{symbol} ({interval}) - {selected_model}")
        ax.set_xlabel("–í—Ä–µ–º—è")
        ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
        ax.legend()
        st.pyplot(fig)

        # --- –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
        last_signal = df_pred["Signal"].iloc[-1]
        if last_signal == 1:
            recommendation = "üìà **–ü–æ–∫—É–ø–∫–∞**"
            recommendation_color = "green"
        elif last_signal == -1:
            recommendation = "üìâ **–ü—Ä–æ–¥–∞–∂–∞**"
            recommendation_color = "red"
        else:
            recommendation = "‚è≥ **–î–µ—Ä–∂–∏—Ç–µ**"
            recommendation_color = "gray"
        st.markdown(f"<h2 style='color: {recommendation_color}; text-align: center;'>{recommendation}</h2>",
                    unsafe_allow_html=True)
        st.subheader(f"üìà –ü—Ä–æ–≥–Ω–æ–∑ –º–æ–¥–µ–ª–∏ {selected_model}: **{recommendation}**")

elif tab == "üìä –°–∏–≥–Ω–∞–ª—ã":
    # === –ò–ú–ò–¢–ê–¶–ò–Ø –ü–û–õ–£–ß–ï–ù–ò–Ø –°–ò–ì–ù–ê–õ–û–í ===
    def get_signals(crypto: str, model: str):
        now = datetime.now()
        signals = []
        for i in range(15):
            signal_time = now - timedelta(minutes=random.randint(1, 2880))  # –¥–æ 2 —Å—É—Ç–æ–∫ –Ω–∞–∑–∞–¥
            signal_price = round(random.uniform(1000, 3000), 2)
            current_price = signal_price + round(random.uniform(-50, 50), 2)
            delta = current_price - signal_price

            duration = now - signal_time
            hours = duration.total_seconds() / 3600

            # –¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞
            if hours < 1:
                signal_type = "–ö–æ—Ä–æ—Ç–∫–∞—è"
            elif hours < 12:
                signal_type = "–°—Ä–µ–¥–Ω—è—è"
            else:
                signal_type = "–î–ª–∏—Ç–µ–ª—å–Ω–∞—è"

            # –°–∏–≥–Ω–∞–ª
            signal_action = "–ü–æ–∫—É–ø–∞—Ç—å" if delta > 0 else "–ü—Ä–æ–¥–∞–≤–∞—Ç—å"

            # –ó–∞–∫—Ä—ã—Ç–∞ –ª–∏ —Å–¥–µ–ª–∫–∞?
            is_closed = duration.total_seconds() > 1800  # –±–æ–ª–µ–µ 30 –º–∏–Ω—É—Ç

            signals.append({
                "–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞": signal_time,
                "–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞": signal_type,
                "–°–∏–≥–Ω–∞–ª": signal_action,
                "–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞": signal_price,
                "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞": current_price,
                "–†–∞–∑–Ω–∏—Ü–∞": delta,
                "–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞": is_closed
            })
        return pd.DataFrame(signals)


    # === –ù–ê–°–¢–†–û–ô–ö–ò STREAMLIT ===
    st.title("üì° –°–∏–≥–Ω–∞–ª—ã –¥–ª—è —Ç—Ä–µ–π–¥–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç")

    # --- –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ---
    cryptos = ["Bitcoin", "Ethereum", "Solana", "BNB"]
    models = ["Strategy A", "Strategy B", "Strategy C"]

    col1, col2 = st.columns(2)
    with col1:
        selected_crypto = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", cryptos)
    with col2:
        selected_model = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥–µ–ª—å", models)

    show_closed = st.checkbox("üîì –û—Ç–æ–±—Ä–∞–∂–∞—Ç—å –∑–∞–∫—Ä—ã—Ç—ã–µ —Å–¥–µ–ª–∫–∏", value=False)

    # --- –ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---
    st.subheader(f"üìã –°–∏–≥–Ω–∞–ª—ã –ø–æ {selected_crypto} —Å –º–æ–¥–µ–ª—å—é {selected_model}")
    df = get_signals(selected_crypto, selected_model)

    # --- –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è ---
    if not show_closed:
        df = df[df["–ó–∞–∫—Ä—ã—Ç–∞—è —Å–¥–µ–ª–∫–∞"] == False]


    # --- –í–∏–∑—É–∞–ª—å–Ω–∞—è –ø–æ–¥—Å–≤–µ—Ç–∫–∞ –ø–æ —Ä–∞–∑–Ω–∏—Ü–µ ---
    def highlight_signal(row):
        # –í—ã—á–∏—Å–ª—è–µ–º —Ü–≤–µ—Ç —Ç–æ–ª—å–∫–æ –¥–ª—è –∫–æ–ª–æ–Ω–∫–∏ "–†–∞–∑–Ω–∏—Ü–∞"
        if row["–†–∞–∑–Ω–∏—Ü–∞"] > 0:
            return [''] * 5 + ['background-color: green; color: white']
        elif row["–†–∞–∑–Ω–∏—Ü–∞"] < 0:
            return [''] * 5 + ['background-color: red; color: white']
        else:
            return [''] * 5 + ['background-color: white; color: black']


    # --- –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ –≤—Ä–µ–º–µ–Ω–∏ –≤ —Å—Ç—Ä–æ–∫—É (–¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è) ---
    df["–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞"] = df["–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞"].dt.strftime("%Y-%m-%d %H:%M")

    # --- –ü–æ–∫–∞–∑ —Ç–∞–±–ª–∏—Ü—ã ---
    styled_df = df[[
        "–í—Ä–µ–º—è —Å–∏–≥–Ω–∞–ª–∞", "–¢–∏–ø —Å–∏–≥–Ω–∞–ª–∞", "–°–∏–≥–Ω–∞–ª", "–¶–µ–Ω–∞ –Ω–∞ –º–æ–º–µ–Ω—Ç —Å–∏–≥–Ω–∞–ª–∞",
        "–¢–µ–∫—É—â–∞—è —Ü–µ–Ω–∞", "–†–∞–∑–Ω–∏—Ü–∞"
    ]].style.apply(highlight_signal, axis=1)

    st.dataframe(styled_df, use_container_width=True)

elif tab == "üìä –ò–Ω–¥–∏–∫–∞—Ç–æ—Ä—ã":
    import algorithms
    # --- –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∞–ª–≥–æ—Ä–∏—Ç–º–æ–≤ ---
    ALGORITHMS = {
        # "Moving Average": algorithms.AlgorithmA(),
        "RSI": algorithms.AlgorithmRSI,
        "SMA": algorithms.AlgorithmSMA,
        "EMA": algorithms.AlgorithmEMA,
        "MACD": algorithms.AlgorithmMACD,
        "ADX": algorithms.AlgorithmADX,
        # "Ichimoku": algorithms.AlgorithmIchimoku,
        # "CCI": algorithms.AlgorithmCCI,
        "Stochastic": algorithms.AlgorithmStochastic,
        "WilliamsR": algorithms.AlgorithmWilliamsR,
        "OBV": algorithms.AlgorithmOBV,
        "VMAP": algorithms.AlgorithmVWAP,
        "BollingerBands": algorithms.AlgorithmBollingerBands,
        "ATR": algorithms.AlgorithmATR,
        "ARIMA": algorithms.AlgorithmARIMA,
    }

    # --- –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å Streamlit ---
    st.title("üìà Crypto Trading Predictor")


    def get_crypto_data(symbol, interval="1m", window_size=20, forecast_horizon=100, reserve_steps=50):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance API.

        :param symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT"
        :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π ("1m", "5m", –∏ —Ç.–ø.)
        :param window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20)
        :param forecast_horizon: –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä—ë–¥ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)
        :param reserve_steps: –ó–∞–ø–∞—Å —à–∞–≥–æ–≤ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)
        :return: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ time, open, high, low, close, volume
        """
        total_needed = window_size + forecast_horizon + reserve_steps
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={total_needed}"

        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()

            df = pd.DataFrame(data, columns=[
                "time", "open", "high", "low", "close", "volume",
                "_1", "_2", "_3", "_4", "_5", "_6"
            ])

            df = df[["time", "open", "high", "low", "close", "volume"]]
            df["time"] = pd.to_datetime(df["time"], unit="ms")
            df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(
                float)
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")
            return pd.DataFrame()
    # --- –í—ã–±–æ—Ä –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã –∏ –∞–ª–≥–æ—Ä–∏—Ç–º–∞ ---
    symbols = tokens
    symbol = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—É", symbols, index=symbols.index("BTCUSDT"))
    interval = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∏–Ω—Ç–µ—Ä–≤–∞–ª", ["1m", "5m", "15m", "1h", "1d"], index=0)
    selected_algorithm = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –∞–ª–≥–æ—Ä–∏—Ç–º", list(ALGORITHMS.keys()))

    st.subheader(f"üìä –ì—Ä–∞—Ñ–∏–∫ {symbol} ({interval})")
    df = get_crypto_data(symbol, interval)
    print(df.head())
    df["Close"] = df["close"]
    algorithm = ALGORITHMS[selected_algorithm]()
    df = algorithm.run(df)
    st.write("–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–∞")

    if selected_algorithm == "SMA":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers, index=numbers.index(5))
        algorithm.get_param(int(window_param))
    elif selected_algorithm == "RSI":
        numbers = [ii for ii in range(10, 40, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers, index=numbers.index(15))
        algorithm.get_param(int(window_param))
    elif selected_algorithm == "EMA":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        algorithm.get_param(int(window_param))
    elif selected_algorithm == "MACD":
        nums_1 = [ii for ii in range(1, 10, 1)]
        nums_2 = [ii for ii in range(11, 20, 1)]
        fastperiod = st.selectbox("Fast Peiod", nums_1)
        slowperiod = st.selectbox("Slow Peiod", nums_2)
        algorithm.get_param(fastperiod=int(fastperiod), slowperiod=int(slowperiod))
    elif selected_algorithm == "ADX":
        numbers = [ii for ii in range(5, 30, 1)]
        period_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        algorithm.get_param(int(period_param))
    elif selected_algorithm == "Ichimoku":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        # algorithm.get_param(int(window_param))
    elif selected_algorithm == "CCI":
        pass
    elif selected_algorithm == "Stochastic":
        k_nums = [ii for ii in range(10, 20, 1)]
        d_nums = [ii for ii in range(1, 10, 1)]
        k_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", k_nums)
        d_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", d_nums)
        algorithm.get_param(k_period=int(k_param), d_period=int(d_param))
    elif selected_algorithm == "WilliamsR":
        numbers = [ii for ii in range(5, 20, 1)]
        window_param = st.selectbox("–ü–µ—Ä–∏–æ–¥", numbers)
        algorithm.get_param(period=int(window_param))
    elif selected_algorithm == "OBV":
        st.write("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã.")
    elif selected_algorithm == "VMAP":
        st.write("–í—Å–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–æ–±—Ä–∞–Ω—ã.")
    elif selected_algorithm == "BollingerBands":
        step = 0.1
        num_1 = [ii for ii in range(5, 30, 1)]
        num_2 = [round(ii * step, 1) for ii in range(int(0.1 / step), int(5.0 / step))]
        num_3 = [round(ii * step, 1) for ii in range(int(0.1 / step), int(5.0 / step))]
        window = st.selectbox("–ü–µ—Ä–∏–æ–¥ —Å–∫–æ–ª—å–∑—è—â–µ–π —Å—Ä–µ–¥–Ω–µ–π", num_1)
        nbdev_up = st.selectbox("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –≤–µ—Ä—Ö–Ω–µ–π –ø–æ–ª–æ—Å—ã", num_2, index=num_2.index(2.0))
        nbdev_dn = st.selectbox("–ö–æ—ç—Ñ—Ñ–∏—Ü–∏–µ–Ω—Ç –¥–ª—è –Ω–∏–∂–Ω–µ–π –ø–æ–ª–æ—Å—ã", num_3, index=num_3.index(2.0))
        algorithm.get_param(window=window, nbdev_up=nbdev_up, nbdev_dn=nbdev_dn)
    elif selected_algorithm == "ATR":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–ü–µ—Ä–∏–æ–¥", numbers)
        algorithm.get_param(period=int(window_param))
    elif selected_algorithm == "ARIMA":
        num_1 = [ii for ii in range(1, 5)]
        num_2 = [ii for ii in range(0, 5)]
        num_3 = [ii for ii in range(1, 5)]
        pp = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ –∞–≤—Ç–æ —Ä–µ–≥—Ä–µ—Å—Å–∏–∏", num_1)
        dd = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ –¥–∏—Ñ—Ñ–µ—Ä–µ–Ω—Ü–∏—Ä–æ–≤–∞–Ω–∏—è", num_2)
        qq = st.selectbox("–ü–æ—Ä—è–¥–æ–∫ —Å–∫–æ–ª—å–∑—è—â–µ–≥–æ —Å—Ä–µ–¥–Ω–µ–≥–æ", num_3)
        algorithm.get_param(p=pp, d=dd, q=qq)
    elif selected_algorithm == "SARIMA":
        numbers = [ii for ii in range(5, 30, 1)]
        window_param = st.selectbox("–†–∞–∑–º–µ—Ä –æ–∫–Ω–∞", numbers)
        # algorithm.get_param(int(window_param))
    df = algorithm.run(df)
    # print(df)
    # --- –ó–∞–ø—Ä–æ—Å –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö ---

    if df is not None:
        import matplotlib.pyplot as plt
        fig, (ax, ax_ind) = plt.subplots(2, 1, figsize=(12, 8))
        ax.plot(df["time"], df["close"], label="–¶–µ–Ω–∞", color="blue")

        if selected_algorithm == "SMA":
            # –î–æ–ø—É—Å—Ç–∏–º, —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö —Ü–µ–Ω—ã
            ax.plot(df["time"], df["SMA"], label="SMA", color="orange", linewidth=2)
            ax_ind.set_visible(False)  # –Ω–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å
        elif selected_algorithm == "EMA":
            # –î–æ–ø—É—Å—Ç–∏–º, —Ä–∏—Å—É–µ–º –ø–æ–≤–µ—Ä—Ö —Ü–µ–Ω—ã
            ax.plot(df["time"], df["EMA"], label="SMA", color="orange", linewidth=2)
            ax_ind.set_visible(False)  # –Ω–∏–∂–Ω–∏–π –≥—Ä–∞—Ñ–∏–∫ –º–æ–∂–Ω–æ —Å–∫—Ä—ã—Ç—å
        elif selected_algorithm == "MACD":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω–∞ ax_ind –≤—ã–≤–æ–¥–∏–º MACD, —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            print(df)
            ax_ind.plot(df["time"], df["MACD"], label="MACD", color="purple")
            ax_ind.plot(df["time"], df["Signal_line"], label="MACD_signal", color="red", linestyle="--")
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–∏–∫–∞–º–∏
            # ax_ind.bar(df["time"], df["MACD_Hist"], label="Histogram", color="gray")
            ax_ind.set_ylabel("MACD")
            ax_ind.legend()
            ax_ind.grid(True)
        elif selected_algorithm == "RSI":
            ax_ind.plot(df["time"], df["RSI"], label="RSI", color="purple", linewidth=1)
            ax_ind.axhline(30, color='red', linestyle='--', label="–£—Ä–æ–≤–µ–Ω—å 30 (–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç—å)")
            ax_ind.axhline(70, color='green', linestyle='--', label="–£—Ä–æ–≤–µ–Ω—å 70 (–ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç—å)")
        elif selected_algorithm == "MACD":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –Ω–∞ ax_ind –≤—ã–≤–æ–¥–∏–º MACD, —Å–∏–≥–Ω–∞–ª—å–Ω—É—é –ª–∏–Ω–∏—é –∏ –≥–∏—Å—Ç–æ–≥—Ä–∞–º–º—É
            ax_ind.plot(df["time"], df["MACD"], label="MACD", color="purple")
            ax_ind.plot(df["time"], df["MACD_signal"], label="MACD_signal", color="red", linestyle="--")
            # –ì–∏—Å—Ç–æ–≥—Ä–∞–º–º—É –º–æ–∂–Ω–æ –Ω–∞—Ä–∏—Å–æ–≤–∞—Ç—å —Å—Ç–æ–ª–±–∏–∫–∞–º–∏
            ax_ind.bar(df["time"], df["MACD_histogram"], label="Histogram", color="gray")
            ax_ind.set_ylabel("MACD")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "ADX":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü df["ADX"]
            # ax_ind.plot(df["time"], df["ADX"], label="ADX", color="green")
            # ax_ind.plot(df["time"], df["DX"], label="ADX", color="blue")
            ax_ind.plot(df["time"], df["-DI"], label="Bear", color="red")
            ax_ind.plot(df["time"], df["+DI"], label="Ox", color="yellow")
            ax_ind.set_ylabel("ADX")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "Ichimoku":
            # –£ Ichimoku –æ–±—ã—á–Ω–æ –Ω–µ—Å–∫–æ–ª—å–∫–æ –ª–∏–Ω–∏–π
            ax_ind.plot(df["time"], df["Tenkan_sen"], label="Conversion", color="orange")
            ax_ind.plot(df["time"], df["Kijun_sen"], label="Base", color="blue")
            ax_ind.plot(df["time"], df["Senkou_Span_A"], label="Lead1", color="green")
            ax_ind.plot(df["time"], df["Senkou_Span_B"], label="Lead2", color="red")
            # –ú–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ–±–ª–∞—Å—Ç—å "–æ–±–ª–∞–∫–∞" (fill_between)
            ax_ind.set_ylabel("Ichimoku")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "CCI":
            ax_ind.plot(df["time"], df["CCI"], label="CCI", color="brown")
            ax_ind.axhline(100, color='grey', linestyle='--')
            ax_ind.axhline(-100, color='grey', linestyle='--')
            ax_ind.set_ylabel("CCI")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "Stochastic":
            ax_ind.plot(df["time"], df["%D"], label="Stochastic %K", color="magenta")
            # –î–æ–ø—É—Å—Ç–∏–º, –µ—Å—Ç—å df["Stochastic_signal"] - –ª–∏–Ω–∏—è %D
            # ax_ind.plot(df["time"], df["Signal"], label="Stochastic %D", color="black", linestyle="--")
            ax_ind.set_ylabel("Stochastic")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "WilliamsR":
            ax_ind.plot(df["time"], df["%R"], label="Williams %R", color="violet")
            ax_ind.axhline(-20, color='red', linestyle='--')  # –∑–æ–Ω—ã –ø–µ—Ä–µ–∫—É–ø–ª–µ–Ω–Ω–æ—Å—Ç–∏/–ø–µ—Ä–µ–ø—Ä–æ–¥–∞–Ω–Ω–æ—Å—Ç–∏
            ax_ind.axhline(-80, color='green', linestyle='--')
            ax_ind.set_ylabel("Williams %R")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "OBV":
            ax_ind.plot(df["time"], df["OBV"], label="OBV", color="teal")
            ax_ind.set_ylabel("OBV")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "VMAP":
            # –û–±—ã—á–Ω–æ VWAP —Ä–∏—Å—É–µ—Ç—Å—è –ø–æ–≤–µ—Ä—Ö —Ü–µ–Ω—ã
            ax.plot(df["time"], df["VWAP"], label="VWAP", color="purple", linewidth=1.5)
            # ax.plot(df["time"], df["VWAP"], label="VWAP", color="purple", linewidth=2.5)
            ax_ind.set_visible(False)

        elif selected_algorithm == "BollingerBands":
            # "–ù–∞–∫–ª–∞–¥—ã–≤–∞–µ–º" –Ω–∞ —Ü–µ–Ω—É
            ax.plot(df["time"], df["Boll_Upper"], label="Upper Band", color="green", linestyle="--")
            ax.plot(df["time"], df["Boll_Middle"], label="Middle Band", color="orange", linestyle="-")
            ax.plot(df["time"], df["Boll_Lower"], label="Lower Band", color="red", linestyle="--")
            ax_ind.set_visible(False)

        elif selected_algorithm == "ATR":
            ax_ind.plot(df["time"], df["ATR"], label="ATR", color="darkcyan")
            ax_ind.set_ylabel("ATR")
            ax_ind.legend()
            ax_ind.grid(True)

        elif selected_algorithm == "ARIMA":
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, –µ—Å—Ç—å —Å—Ç–æ–ª–±–µ—Ü df["ARIMA_pred"] ‚Äî –ø—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã
            ax.plot(df["time"], df["ARIMA_Fitted"], label="ARIMA Prediction", color="darkred", linestyle="--")
            ax_ind.set_visible(False)

        elif selected_algorithm == "SARIMA":
            # –ê–Ω–∞–ª–æ–≥–∏—á–Ω–æ ARIMA, —Å—Ç–æ–ª–±–µ—Ü df["SARIMA_pred"]
            ax_ind.plot(df["time"], df["SARIMA_Fitted"], label="SARIMA Prediction", color="darkblue", linestyle="--")
            ax_ind.set_visible(True)

        ax.scatter(df["time"][df["Signal"] == 1], df["close"][df["Signal"] == 1], color="green", label="–ü–æ–∫—É–ø–∫–∞",
                   marker="^", alpha=1)
        ax.scatter(df["time"][df["Signal"] == -1], df["close"][df["Signal"] == -1], color="red", label="–ü—Ä–æ–¥–∞–∂–∞",
                   marker="v", alpha=1)
        ax.set_title(f"{symbol} ({interval})")
        ax.set_xlabel("–í—Ä–µ–º—è")
        ax.set_ylabel("–¶–µ–Ω–∞ (USDT)")
        ax.legend()
        st.pyplot(fig)

        # --- –í—ã–≤–æ–¥ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–∏–≥–Ω–∞–ª–∞ ---
        last_signal = df["Signal"].iloc[-1]
        if last_signal == 1:
            st.success("‚úÖ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü–æ–∫—É–ø–∞—Ç—å!")
        elif last_signal == -1:
            st.error("‚ùå –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –ü—Ä–æ–¥–∞–≤–∞—Ç—å!")
        else:
            st.info("üîç –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è: –î–µ—Ä–∂–∞—Ç—å (–±–µ–∑ —è–≤–Ω–æ–≥–æ —Å–∏–≥–Ω–∞–ª–∞).")

elif tab == "üìä –ü—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å —Ü–µ–Ω—É":
    st.title("üìà –ü—Ä–æ–≥–Ω–æ–∑–∏—Ä–æ–≤–∞–Ω–∏–µ —Ü–µ–Ω—ã –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã")
    import joblib
    import plotly.graph_objects as go
    import os


    def get_crypto_data(symbol, interval="1m", window_size=20, forecast_horizon=100, reserve_steps=50):
        """
        –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å—Ç–æ—Ä–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å Binance API.

        :param symbol: –°–∏–º–≤–æ–ª —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä "BTCUSDT"
        :param interval: –ò–Ω—Ç–µ—Ä–≤–∞–ª —Å–≤–µ—á–µ–π ("1m", "5m", –∏ —Ç.–ø.)
        :param window_size: –†–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –¥–ª—è –º–æ–¥–µ–ª–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 20)
        :param forecast_horizon: –°–∫–æ–ª—å–∫–æ —à–∞–≥–æ–≤ –≤–ø–µ—Ä—ë–¥ –±—É–¥–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–æ (–Ω–∞–ø—Ä–∏–º–µ—Ä, 30)
        :param reserve_steps: –ó–∞–ø–∞—Å —à–∞–≥–æ–≤ –Ω–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π (–Ω–∞–ø—Ä–∏–º–µ—Ä, 10)
        :return: DataFrame —Å –∫–æ–ª–æ–Ω–∫–∞–º–∏ time, open, high, low, close, volume
        """
        total_needed = window_size + forecast_horizon + reserve_steps
        url = f"https://api.binance.com/api/v3/klines?symbol={symbol}&interval={interval}&limit={total_needed}"

        try:
            response = requests.get(url, timeout=10)
            response.raise_for_status()
            data = response.json()

            df = pd.DataFrame(data, columns=[
                "time", "open", "high", "low", "close", "volume",
                "_1", "_2", "_3", "_4", "_5", "_6"
            ])

            df = df[["time", "open", "high", "low", "close", "volume"]]
            df["time"] = pd.to_datetime(df["time"], unit="ms")
            df[["open", "high", "low", "close", "volume"]] = df[["open", "high", "low", "close", "volume"]].astype(
                float)
            return df

        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –¥–∞–Ω–Ω—ã—Ö —Å Binance: {e}")
            return pd.DataFrame()


    def predict_future_prices(model_name, last_sequence, model_dir="models", n_steps=100):
        """
        –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –Ω–∞ n –±—É–¥—É—â–∏—Ö —à–∞–≥–æ–≤ –Ω–∞ –æ—Å–Ω–æ–≤–µ –æ–±—É—á–µ–Ω–Ω–æ–π –º–æ–¥–µ–ª–∏.

        :param model_name: –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ –±–µ–∑ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è, –Ω–∞–ø—Ä–∏–º–µ—Ä "LinearRegression"
        :param model_dir: –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è, –≥–¥–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –º–æ–¥–µ–ª—å –∏ —Å–∫–µ–π–ª–µ—Ä—ã
        :param last_sequence: numpy-–º–∞—Å—Å–∏–≤ —Ñ–æ—Ä–º—ã (WINDOW_SIZE, feature_dim)
        :param n_steps: —Å–∫–æ–ª—å–∫–æ –±—É–¥—É—â–∏—Ö —Ç–æ—á–µ–∫ –ø—Ä–µ–¥—Å–∫–∞–∑–∞—Ç—å
        :return: —Å–ø–∏—Å–æ–∫ –∏–∑ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π –≤ –∏—Å—Ö–æ–¥–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ
        """
        # === –ó–∞–≥—Ä—É–∑–∫–∞
        # model_path = os.path.join(model_dir, f"{model_name}")
        model_path = f"{model_dir}/{model_name}"
        # x_scaler_path = os.path.join(model_dir, "scaler_v2.pkl")
        x_scaler_path = f"{model_dir}/scaler_v2.pkl"
        # y_norm_path = os.path.join(model_dir, "y_norm_params.pkl")
        y_norm_path = f"{model_dir}/y_norm_params.pkl"

        model = joblib.load(model_path)
        x_scaler = joblib.load(x_scaler_path)
        y_min, y_max = joblib.load(y_norm_path)

        def unscale_y(y_scaled):
            return y_scaled * (y_max - y_min) / 0.1 + y_min

        generated = []

        for _ in range(n_steps):
            # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º—É (1, -1) –∏ –º–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º
            input_flat = last_sequence.reshape(1, -1)
            input_scaled = x_scaler.transform(input_flat)

            # –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ (–≤ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–º –º–∞—Å—à—Ç–∞–±–µ)
            pred_scaled = model.predict(input_scaled)[0]
            pred_real = unscale_y(pred_scaled)
            generated.append(pred_real)

            # –í—Å—Ç–∞–≤–ª—è–µ–º –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –æ–±—Ä–∞—Ç–Ω–æ –≤ –ø–æ—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª—å–Ω–æ—Å—Ç—å
            new_step = last_sequence[-1].copy()
            new_step[0] = pred_scaled  # –µ—Å–ª–∏ –º–æ–¥–µ–ª—å —É—á–∏–ª–∞—Å—å –Ω–∞ –Ω–æ—Ä–º–∞–ª–∏–∑–æ–≤–∞–Ω–Ω—ã—Ö X
            last_sequence = np.vstack([last_sequence[1:], new_step])

        future_times = [last_time + timedelta(minutes=i + 1) for i in range(n_steps)]

        return pd.DataFrame({
            "time": future_times,
            "PredictedValue": generated
        })

    crypto_options = tokens_dict
    intervals = ["1m", "5m", "30m"]

    # –ú–æ–¥–µ–ª–∏ –º–∞—à–∏–Ω–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è (joblib)
    model_options = {
        "Linear Regression": "LinearRegression_v3.pkl",
        # "Ridge Regression": "Ridge_v2.pkl",
        # "Bagging Regressor": "BaggingRegressor_v2.pkl",
        # "MLP Regressor": "MLPRegressor_v2.pkl",
        # "Random Forest": "RandomForest_v2.pkl",
        # "Lasso": "Lasso_v2.pkl",
        # "ElasticNet": "ElasticNet_v2.pkl",
        "BayesianRidge": "BayesianRidge_v3.pkl",
        # "SGD": "SGDRegressor_v2.pkl",
        # "DecisionTree": "DecisionTreeRegressor_v2.pkl",
        # "ExtraTrees": "ExtraTreesRegressor_v2.pkl",
        # "GradientBoosting": "GradientBoostingRegressor_v2.pkl",
    }

    # –ú–æ–¥–µ–ª–∏ –Ω–µ–π—Ä–æ—Å–µ—Ç–µ–π (torch)

    col1, col2, col3, col4 = st.columns(4)
    with col1:
        selected_crypto = st.selectbox("ü™ô –ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞", list(crypto_options.keys()))
    with col2:
        interval = st.selectbox("üïí –ò–Ω—Ç–µ—Ä–≤–∞–ª", intervals)
    # with col3:
    #     selected_type_model = st.selectbox("üß† –¢–∏–ø –º–æ–¥–µ–ª–∏", ["–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ", "–ù–µ–π—Ä–æ–Ω–Ω—ã–µ —Å–µ—Ç–∏"])
    # with col4:
    #     selected_model = st.selectbox(
    #         "üìö –ú–æ–¥–µ–ª—å",
    #         list(model_options.keys()) if selected_type_model == "–ú–∞—à–∏–Ω–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ" else list(nn_models.keys())
    #     )
    with col3:
        selected_model = st.selectbox("üìö –ú–æ–¥–µ–ª—å", list(model_options.keys()))

    symbol = crypto_options[selected_crypto]
    st.write("üì• –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —Å Binance...")

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –æ–±—É—á–∞–µ–º –º–æ–¥–µ–ª—å
    df = get_crypto_data(symbol, interval)
    if df is None or df.empty:
        st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –¥–∞–Ω–Ω—ã–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
    else:
        st.success("‚úÖ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã.")

        # === –ò–º–∏—Ç–∞—Ü–∏—è –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏—è –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π ===
        n_steps_ahead = 30  # —Å–∫–æ–ª—å–∫–æ —Ç–æ—á–µ–∫ –≤–ø–µ—Ä–µ–¥ –ø—Ä–µ–¥—Å–∫–∞–∑—ã–≤–∞–µ–º
        window_size = 40  # –æ–∫–Ω–æ –∏–∑ –ø—Ä–æ—à–ª—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π, –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ—Ç–æ—Ä–æ–≥–æ –º–æ–¥–µ–ª–∏—Ä—É–µ–º


    # def predict_future_price(df, model_name, is_nn=False, window_size=20, steps_ahead=30):
    #     # –ü–æ–¥–≥—Ä—É–∂–∞–µ–º scaler
    #     scaler = joblib.load("trained_models_v3/scaler_v2.pkl")
    #
    #     # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ window_size —Å—Ç—Ä–æ–∫
    #     df_window = df[["open", "close", "high", "low", "volume"]].tail(window_size)
    #     if df_window.shape[0] < window_size:
    #         raise ValueError(f"–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö: –Ω—É–∂–Ω–æ –º–∏–Ω–∏–º—É–º {window_size} —Å—Ç—Ä–æ–∫")
    #
    #     # –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ —Ñ–æ—Ä–º—É (1, 100)
    #     X_input = df_window.values.reshape(1, -1)
    #     X_scaled = scaler.transform(X_input).reshape(window_size, 5)
    #
    #     preds = []
    #     device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
    #     model = joblib.load(f"trained_models_v3/{model_name}")
    #     flat_input = X_scaled.flatten().reshape(1, -1)
    #     pred = model.predict(flat_input)
    #     preds = [pred[0]] * steps_ahead
    #
    #     return preds


    def simulate_prediction(df, steps=100):
        last_time = df["time"].iloc[-1]
        recent_prices = df["close"].tail(20).values  # –±–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 20 –∑–Ω–∞—á–µ–Ω–∏–π

        trend = np.polyfit(range(len(recent_prices)), recent_prices, deg=1)[0]  # –Ω–∞–∫–ª–æ–Ω
        last_price = recent_prices[-1]

        simulated = [last_price]

        for i in range(1, steps):
            # –ë–∞–∑–æ–≤–æ–µ –∏–∑–º–µ–Ω–µ–Ω–∏–µ: –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç—Ä–µ–Ω–¥ + –¥–æ–±–∞–≤–ª—è–µ–º —à—É–º
            drift = trend * np.random.uniform(0.8, 1.2)  # –Ω–µ–º–Ω–æ–≥–æ –≤–∞—Ä—å–∏—Ä—É–µ–º —Ç—Ä–µ–Ω–¥
            noise = np.random.normal(loc=0, scale=last_price * 0.0025)  # —à—É–º ¬±0.25%

            next_price = simulated[-1] + drift + noise
            next_price = max(next_price, 0.0001)  # –Ω–µ –¥–∞—ë–º —Ü–µ–Ω–µ —É–ø–∞—Å—Ç—å –Ω–∏–∂–µ –Ω—É–ª—è
            simulated.append(next_price)

        future_times = [last_time + timedelta(minutes=i + 1) for i in range(steps)]

        return pd.DataFrame({
            "time": future_times,
            "PredictedValue": simulated
        })

    last_price = df["close"].iloc[-1]
    last_time = df["time"].iloc[-1]
    time_delta = df["time"].diff().median()

    # –ë–µ—Ä–µ–º –æ–∫–Ω–æ –ø–æ—Å–ª–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    recent_window = df["close"].iloc[-21:]
    price_min = recent_window.min()
    price_max = recent_window.max()

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –±—É–¥—É—â–∏—Ö —Ç–æ—á–µ–∫
    future_times = [last_time + i * time_delta for i in range(1, 1 + 1)]

        # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è "–ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã—Ö" –∑–Ω–∞—á–µ–Ω–∏–π –≤ –ø—Ä–µ–¥–µ–ª–∞—Ö min/max –æ–∫–Ω–∞
    model_filename = model_options[selected_model]
    is_nn = False
    df_numeric = df.copy()
    df_numeric = df_numeric.select_dtypes(include=[np.number])
    # 2. –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å—Ç–æ–ª–±—Ü–æ–≤
    df_last_100 = df_numeric.tail(20)
    # 3. –ü—Ä–µ–æ–±—Ä–∞–∑—É–µ–º –≤ numpy –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–º–µ—Ä–Ω–æ—Å—Ç—å –±–∞—Ç—á–∞
    last_sequence = df_last_100.values.reshape(1, -1)
    # 4. –ü–µ—Ä–µ–¥–∞—ë–º –≤ —Ñ—É–Ω–∫—Ü–∏—é
    predicted_values = predict_future_prices(model_filename, last_sequence=last_sequence)
    predicted_values = simulate_prediction(df)

    df1 = predicted_values

    fig = go.Figure()

    fig.add_trace(go.Scatter(
        x=df["time"],
        y=df["close"],
        mode="lines",
        name="üìâ –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è —Ü–µ–Ω–∞",
        line=dict(color="blue")
    ))

    fig.add_trace(go.Scatter(
        x=df1["time"],
        y=df1["PredictedValue"],
        mode="lines",
        name="üìà –ü—Ä–æ–≥–Ω–æ–∑ —Ü–µ–Ω—ã",
        line=dict(color="red", dash="dash")
    ))

    fig.update_layout(
        title=f"{symbol} ‚Äî –§–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω–∞—è —Ü–µ–Ω–∞ ({interval})",
        xaxis_title="–í—Ä–µ–º—è",
        yaxis_title="–¶–µ–Ω–∞ (USDT)",
        template="plotly_dark",
        legend=dict(orientation="h", yanchor="bottom", y=1.02, xanchor="right", x=1)
    )

    st.plotly_chart(fig, use_container_width=True)

    st.info(f"üìç –ü–æ—Å–ª–µ–¥–Ω–µ–µ –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: **{round(df1.iloc[-1]['PredictedValue'], 4)} USDT**")

elif tab == "üìä Crypto RAG":
    st.title("üß† RAG-—Å–∏—Å—Ç–µ–º–∞ –¥–ª—è –≤–æ–ø—Ä–æ—Å–æ–≤")
    if st.session_state.retriever is None:
        with st.spinner("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –∏ –∏–Ω–¥–µ–∫—Å–∞..."):
            import json
            import google.generativeai as genai
            from langchain_core.documents import Document
            from langchain_community.vectorstores import FAISS
            from langchain_huggingface import HuggingFaceEmbeddings
            from langchain.text_splitter import CharacterTextSplitter
            from config import gemini_api

            def load_jsonl_documents(path):
                """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ .jsonl –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Document."""
                documents = []
                with open(path, "r", encoding="utf-8") as f:
                    for line in f:
                        record = json.loads(line)
                        documents.append(Document(
                            page_content=record["content"],
                            metadata={"title": record["title"], "source": record["source"]}
                        ))
                return documents


            def setup_rag_pipeline(jsonl_path="rag_data.jsonl", embedding_model_name="all-MiniLM-L6-v2"):
                """–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π, —Å–æ–∑–¥–∞–Ω–∏–µ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –∏–Ω–¥–µ–∫—Å–∞ –∏ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞."""

                # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ Gemini
                genai.configure(api_key=gemini_api)
                model = genai.GenerativeModel("models/gemini-2.0-flash-lite-001")

                # –ó–∞–≥—Ä—É–∑–∫–∞ –∏ —Ä–∞–∑–±–∏–µ–Ω–∏–µ —Ç–µ–∫—Å—Ç–æ–≤
                MAX_LEN = 1000
                documents = load_jsonl_documents(jsonl_path)
                documents = [doc for doc in documents if len(doc.page_content) <= MAX_LEN][:3]
                splitter = CharacterTextSplitter(
                    chunk_size=500,
                    chunk_overlap=50,
                    length_function=len,
                    keep_separator=False
                )
                chunks = splitter.split_documents(documents)

                # –°–æ–∑–¥–∞–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–∞
                embeddings = HuggingFaceEmbeddings(model_name=embedding_model_name)
                vectorstore = FAISS.from_documents(chunks, embeddings)
                retriever = vectorstore.as_retriever()
                st.session_state.retriever = True
                return model, retriever


            def answer_query(model, retriever, query):
                """–§–æ—Ä–º–∏—Ä—É–µ—Ç –æ—Ç–≤–µ—Ç –æ—Ç Gemini –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ä–µ—Ç—Ä–∏–≤–µ—Ä–∞."""
                answer = f"\n‚ùì –í–æ–ø—Ä–æ—Å: {query}\n"
                docs = retriever.invoke(query)

                if not docs:
                    answer += "ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                    return answer

                answer += f"\nüîé –ù–∞–π–¥–µ–Ω–æ {len(docs)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:\n"
                context = ""
                for i, doc in enumerate(docs, 1):
                    answer += f"\nüìÑ –§—Ä–∞–≥–º–µ–Ω—Ç {i}:\n{doc.page_content}\n"
                    context += doc.page_content + "\n"

                prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {query}"
                st.write("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini...")
                response = model.generate_content(prompt)
                answer += "\nüß† –û—Ç–≤–µ—Ç –æ—Ç Gemini:\n\n"
                answer += response.text
                return answer
                #
                # def run_rag(query, retriever):
                #     docs = retriever.get_relevant_documents(query)
                #     if not docs:
                #         answer = "ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."
                #     else:
                #         answer = f"\nüîé –ù–∞–π–¥–µ–Ω–æ {len(docs)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:\n"
                #         for i, doc in enumerate(docs, 1):
                #             answer += f"\nüìÑ –§—Ä–∞–≥–º–µ–Ω—Ç {i}:\n{doc.page_content}\n"
                #     return answer
            model, retriever = setup_rag_pipeline()

    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    query = st.text_input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:", "")

    # –ö–Ω–æ–ø–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏
    if st.button("–ü–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç") and query.strip():
        with st.spinner("üß† –î—É–º–∞—é..."):
            response = answer_query(model, retriever, query)
            st.success(response)

elif tab == "üìä –ê–Ω–∞–ª–∏–∑ –Ω–æ–≤–æ—Å—Ç–µ–π":

    import joblib
    from sklearn.pipeline import Pipeline
    from parsing_news.telegram_4 import parse_telegram_news

    def sentiment_color(sentiment):
        if sentiment.lower() == "Positive":
            return "#d4edda"  # –∑–µ–ª—ë–Ω—ã–π
        elif sentiment.lower() == "Negative":
            return "#f8d7da"  # –∫—Ä–∞—Å–Ω—ã–π
        elif sentiment.lower() == "Neutral":
            return "#e2e3e5"  # —Å–µ—Ä—ã–π
        return "#ffffff"

    # –ó–∞–≥—Ä—É–∂–∞–µ–º –º–æ–¥–µ–ª–∏
    crypto_pipe = joblib.load("NLP/sentiment_model/crypto_classifier_model.pkl")
    sentiment_pipe = joblib.load("NLP/sentiment_model/felt_classifier_model.pkl")
    label_encoder = joblib.load("NLP/sentiment_model/label_encoder.pkl")

    # crypto_pipe = Pipeline([("clf", crypto_model)])
    # sentiment_pipe = Pipeline([("clf", sentiment_model)])

    # –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π
    def fetch_news(source, days_back):
        return parse_telegram_news(days_back=days_back, channel_title=source,
                                   api_id=api_id, api_hash=api_hash, phone=phone)

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è
    def process_news(news_list):
        results = []
        for news in news_list:
            text = news["text"]
            if crypto_pipe.predict([text])[0]:
                sentiment = sentiment_pipe.predict([text])[0]
                sentiment_label = label_encoder.inverse_transform([sentiment])[0]
                results.append({
                    "–î–∞—Ç–∞": news["date"],
                    "–í—Ä–µ–º—è": news["time"],
                    "–ù–æ–≤–æ—Å—Ç—å": text,
                    "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": sentiment_label,
                    "–°—Å—ã–ª–∫–∞": news.get("url", "-")
                })
        return results

    st.title("üì∞ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –≤—Ä–µ–º–µ–Ω–∏")

    source = st.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", ["if_market_news", "web3news", "cryptodaily", "slezisatoshi"])
    days_back = st.slider("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?", 1, 30, 7)

    if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
        with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
            raw_news = fetch_news(source, days_back)
            processed_news = process_news(raw_news)

            if processed_news:
                df = pd.DataFrame(processed_news)
                # styled_df = df.style.apply(highlight_sentiment, axis=1)

                st.success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π: {len(df)}")
                st.dataframe(df, use_container_width=True)
            else:
                st.info("–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
