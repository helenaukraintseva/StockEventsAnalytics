import os
import json
import numpy as np
import faiss
import logging
from dotenv import load_dotenv
from sentence_transformers import SentenceTransformer

load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")

KB_PATH = os.getenv("KB_PATH", "knowledge_base.json")
EMBED_PATH = os.getenv("EMBED_PATH", "doc_embeddings.npy")
FAISS_INDEX_PATH = os.getenv("FAISS_INDEX_PATH", "faiss_index.index")
MODEL_NAME = os.getenv("EMBED_MODEL", "all-MiniLM-L6-v2")


def save_knowledge_base(documents, path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ –≤ JSON-—Ñ–∞–π–ª.

    :param documents: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å—Ç—Ä–æ–∫
    :param path: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É JSON
    :return: None
    """
    with open(path, "w", encoding="utf-8") as f:
        json.dump(documents, f, ensure_ascii=False, indent=2)
    logging.info("üß† –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞: %s", path)


def embed_documents(documents, model_name):
    """
    –í–µ–∫—Ç–æ—Ä–∏–∑—É–µ—Ç –¥–æ–∫—É–º–µ–Ω—Ç—ã —Å –ø–æ–º–æ—â—å—é SentenceTransformer.

    :param documents: –°–ø–∏—Å–æ–∫ —Ç–µ–∫—Å—Ç–æ–≤
    :param model_name: –ù–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥–µ–ª–∏ SentenceTransformer
    :return: –ú–∞—Å—Å–∏–≤ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    """
    model = SentenceTransformer(model_name)
    embeddings = model.encode(documents, convert_to_numpy=True)
    return embeddings


def save_embeddings_and_index(embeddings, embed_path, index_path):
    """
    –°–æ—Ö—Ä–∞–Ω—è–µ—Ç —ç–º–±–µ–¥–¥–∏–Ω–≥–∏ –≤ .npy –∏ –∏–Ω–¥–µ–∫—Å –≤ FAISS-—Ñ–æ—Ä–º–∞—Ç–µ.

    :param embeddings: np.array —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤
    :param embed_path: –ü—É—Ç—å –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è .npy
    :param index_path: –ü—É—Ç—å –¥–ª—è FAISS-–∏–Ω–¥–µ–∫—Å–∞
    :return: None
    """
    np.save(embed_path, embeddings)
    index = faiss.IndexFlatL2(embeddings.shape[1])
    index.add(embeddings)
    faiss.write_index(index, index_path)
    logging.info("üíæ –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ –∏ –∏–Ω–¥–µ–∫—Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")


if __name__ == "__main__":
    # 1. –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π
    knowledge_base = [
        "–ë–∏—Ç–∫–æ–π–Ω ‚Äî —ç—Ç–æ –¥–µ—Ü–µ–Ω—Ç—Ä–∞–ª–∏–∑–æ–≤–∞–Ω–Ω–∞—è —Ü–∏—Ñ—Ä–æ–≤–∞—è –≤–∞–ª—é—Ç–∞.",
        "Ethereum –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç —Å–º–∞—Ä—Ç-–∫–æ–Ω—Ç—Ä–∞–∫—Ç—ã.",
        "–ë–ª–æ–∫—á–µ–π–Ω ‚Äî —ç—Ç–æ —Ä–∞—Å–ø—Ä–µ–¥–µ–ª—ë–Ω–Ω—ã–π —Ä–µ–µ—Å—Ç—Ä –¥–∞–Ω–Ω—ã—Ö.",
        "–ú–∞–π–Ω–∏–Ω–≥ ‚Äî –ø—Ä–æ—Ü–µ—Å—Å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –±–ª–æ–∫–æ–≤.",
        "–ö—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞ –Ω–µ –∫–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç—Å—è –≥–æ—Å—É–¥–∞—Ä—Å—Ç–≤–æ–º."
    ]

    save_knowledge_base(knowledge_base, KB_PATH)

    # 2. –í–µ–∫—Ç–æ—Ä–∏–∑–∞—Ü–∏—è
    embeddings = embed_documents(knowledge_base, MODEL_NAME)

    # 3. –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ –∏ –∏–Ω–¥–µ–∫—Å–∞
    save_embeddings_and_index(embeddings, EMBED_PATH, FAISS_INDEX_PATH)

    logging.info("‚úÖ –û–±—É—á–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ: –≤—Å—ë —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ.")
