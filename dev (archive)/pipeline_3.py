import os
import time
import google.generativeai as genai
from langchain.document_loaders import JSONLoader
from langchain_community.vectorstores import FAISS
from langchain_huggingface import HuggingFaceEmbeddings
from langchain.text_splitter import CharacterTextSplitter
from config import gemini_api
import json
from langchain_core.documents import Document

def load_jsonl_documents(path):
    documents = []
    with open(path, "r", encoding="utf-8") as f:
        for line in f:
            record = json.loads(line)
            documents.append(Document(
                page_content=record["content"],
                metadata={"title": record["title"], "source": record["source"]}
            ))
    return documents

# === –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Gemini ===
genai.configure(api_key=gemini_api)
model = genai.GenerativeModel("models/gemini-2.0-flash-lite-001")

start_time = time.time()

# === –®–∞–≥ 1: –ó–∞–≥—Ä—É–∑–∫–∞ —Ç–µ–∫—Å—Ç–∞ ===
documents = load_jsonl_documents("rag_data.jsonl")

# === –®–∞–≥ 2: –†–∞–∑–±–∏–µ–Ω–∏–µ –Ω–∞ —á–∞–Ω–∫–∏ ===
splitter = CharacterTextSplitter(chunk_size=500, chunk_overlap=50)
chunks = splitter.split_documents(documents)

# === –®–∞–≥ 3: –≠–º–±–µ–¥–¥–∏–Ω–≥–∏ (–ª–æ–∫–∞–ª—å–Ω—ã–µ) ===
embeddings = HuggingFaceEmbeddings(model_name="all-MiniLM-L6-v2")

# === –®–∞–≥ 4: –ò–Ω–¥–µ–∫—Å–∞—Ü–∏—è FAISS ===
vectorstore = FAISS.from_documents(chunks, embeddings)

# === –®–∞–≥ 5: –ü–æ–∏—Å–∫ ===
retriever = vectorstore.as_retriever()
query = "–ß—Ç–æ —Ç–∞–∫–æ–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞"
docs = retriever.invoke(query)

# === –®–∞–≥ 6: –í—ã–≤–æ–¥ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —á–µ—Ä–µ–∑ Gemini ===
if not docs:
    print("ü§∑ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
else:
    print(f"\nüîé –ù–∞–π–¥–µ–Ω–æ {len(docs)} —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω—ã—Ö —Ñ—Ä–∞–≥–º–µ–Ω—Ç–æ–≤:")
    context = ""
    for i, doc in enumerate(docs, 1):
        print(f"\nüìÑ –§—Ä–∞–≥–º–µ–Ω—Ç {i}:\n{doc.page_content}")
        context += doc.page_content + "\n"

    # === –®–∞–≥ 7: –ó–∞–ø—Ä–æ—Å –∫ Gemini ===
    prompt = f"–ö–æ–Ω—Ç–µ–∫—Å—Ç:\n{context}\n\n–í–æ–ø—Ä–æ—Å: {query}"
    print("\n‚è≥ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Gemini...")
    response = model.generate_content(prompt)
    print("\nüß† –û—Ç–≤–µ—Ç –æ—Ç Gemini:")
    print(response.text)

print("\n‚è±Ô∏è –í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:", round(time.time() - start_time, 2), "—Å–µ–∫.")
