import streamlit as st
from datetime import datetime, timedelta
import joblib
from sklearn.pipeline import Pipeline
from parsing_news.telegram_4 import parse_telegram_news
from config import api_id, api_hash, phone
import pandas as pd

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
crypto_model = joblib.load("NLP/crypto_classifier_model.pkl")
sentiment_model = joblib.load("NLP/felt_classifier_model.pkl")
label_encoder = joblib.load("NLP/label_encoder.pkl")

# --- –û–±—ë—Ä—Ç–∫–∏ ---
crypto_pipe = Pipeline([("clf", crypto_model)])
sentiment_pipe = Pipeline([("clf", sentiment_model)])

# === –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–æ–≤–æ—Å—Ç–µ–π –∏–∑ Telegram ===
def fetch_news(source, days_back):
    return parse_telegram_news(days_back=days_back, channel_title=source, api_id=api_id, api_hash=api_hash, phone=phone)

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π ===
def process_news(news_list):
    results = []
    for news in news_list:
        text = news["text"]
        if crypto_pipe.predict([text])[0]:  # –µ—Å–ª–∏ —ç—Ç–æ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç—å
            sentiment = sentiment_pipe.predict([text])[0]
            sentiment_label = label_encoder.inverse_transform([sentiment])[0]
            results.append({
                "–î–∞—Ç–∞": news["date"],
                "–í—Ä–µ–º—è": news["time"],
                "–ù–æ–≤–æ—Å—Ç—å": text,
                "–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": sentiment_label
            })
    return results

# === –ò–Ω—Ç–µ—Ä—Ñ–µ–π—Å ===
st.set_page_config(page_title="–ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏—è –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π", layout="wide")
st.title("üì∞ –ê–Ω–∞–ª–∏–∑ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π –ø–æ –∏—Å—Ç–æ—á–Ω–∏–∫—É –∏ –≤—Ä–µ–º–µ–Ω–∏")

# --- –í—ã–±–æ—Ä –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ ---
source = st.selectbox("–ò—Å—Ç–æ—á–Ω–∏–∫ –Ω–æ–≤–æ—Å—Ç–µ–π:", ["if_market_news", "web3news", "cryptodaily", "slezisatoshi"])  # –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –¥—Ä—É–≥–∏–µ
days_back = st.slider("–ó–∞ —Å–∫–æ–ª—å–∫–æ –¥–Ω–µ–π –Ω–∞–∑–∞–¥ –±—Ä–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏?", min_value=1, max_value=30, value=7)

# --- –ö–Ω–æ–ø–∫–∞ –∑–∞–ø—É—Å–∫–∞ –∞–Ω–∞–ª–∏–∑–∞ ---
if st.button("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å"):
    with st.spinner("–ó–∞–≥—Ä—É–∂–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º..."):
        raw_news = fetch_news(source, days_back)
        processed_news = process_news(raw_news)

        if processed_news:
            df = pd.DataFrame(processed_news)
            st.success(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–æ –∫—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–µ–π: {len(df)}")
            st.dataframe(df, use_container_width=True)
        else:
            st.info("–ö—Ä–∏–ø—Ç–æ-–Ω–æ–≤–æ—Å—Ç–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –ø–æ —É–∫–∞–∑–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º.")
