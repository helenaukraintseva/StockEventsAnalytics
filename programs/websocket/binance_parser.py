import os
import json
import asyncio
import logging
import websockets
from dotenv import load_dotenv
from databases.pg_db import PostgresClient

load_dotenv()
logging.basicConfig(level=logging.INFO, format="%(asctime)s [%(levelname)s] %(message)s")


class BinanceParser:
    def __init__(self):
        """
        –ü–∞—Ä—Å–µ—Ä Binance WebSocket.
        """
        self.db = None
        self.base_url = "wss://stream.binance.com:443/stream?streams="
        self.symbols = os.getenv("BINANCE_SYMBOLS", "ETHUSDT,SOLUSDT,XRPUSDT,ADAUSDT,BNBUSDT,LINKUSDT,BTCUSDT").split(",")

    async def get_data_websocket(self, save_db: bool):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ –≤—Å–µ–º —Å–∏–º–≤–æ–ª–∞–º.

        :param save_db: –§–ª–∞–≥, —Å–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
        :return: None
        """
        connections = [self.connect(symbol.lower(), save_db=save_db) for symbol in self.symbols]
        await asyncio.gather(*connections)

    async def connect(self, symbol: str, save_db: bool):
        """
        –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –æ–¥–Ω–æ–º—É —Ç–æ—Ä–≥–æ–≤–æ–º—É –ø–æ—Ç–æ–∫—É Binance.

        :param symbol: –°–∏–º–≤–æ–ª, –Ω–∞–ø—Ä–∏–º–µ—Ä btcusdt
        :param save_db: –§–ª–∞–≥ –∑–∞–ø–∏—Å–∏ –≤ –ë–î
        :return: None
        """
        url = self.base_url + f"{symbol}@trade"
        timing = 1  # –∏–Ω—Ç–µ—Ä–≤–∞–ª—å–Ω–æ—Å—Ç—å (–≤ —Å–µ–∫—É–Ω–¥–∞—Ö)

        async with websockets.connect(url) as ws:
            logging.info("üì° –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫: %s", url)
            while True:
                result = json.loads(await ws.recv())["data"]

                if result.get("e") == "trade":
                    trade_id = result["t"]
                    price = float(result["p"])
                    volume = float(result["q"])
                    timestamp = result["T"] // (1000 * timing)

                    logging.info(f"üìà {symbol.upper()} | –¶–µ–Ω–∞: {price} | –û–±—ä—ë–º: {volume} | –í—Ä–µ–º—è: {timestamp}")

                    if save_db and self.db:
                        query = (
                            f"INSERT INTO websocket_data (symbol, price, volume, timestamp) "
                            f"VALUES ('{symbol.upper()}', {price}, {volume}, {timestamp});"
                        )
                        self.db.set_data(query)

    def run_websocket(self, db_client=None, save_db: bool = False):
        """
        –ó–∞–ø—É—Å–∫–∞–µ—Ç WebSocket-–ø–∞—Ä—Å–∏–Ω–≥.

        :param db_client: –û–±—ä–µ–∫—Ç –ë–î (PostgresClient)
        :param save_db: –°–æ—Ö—Ä–∞–Ω—è—Ç—å –ª–∏ –¥–∞–Ω–Ω—ã–µ –≤ –ë–î
        :return: None
        """
        if save_db:
            self.db = db_client
        asyncio.run(self.get_data_websocket(save_db=save_db))


if __name__ == "__main__":
    db_client = PostgresClient(
        db_name=os.getenv("DB_NAME", "postgres"),
        user=os.getenv("DB_USER", "postgres"),
        password=os.getenv("DB_PASSWORD", "your_password"),
        host=os.getenv("DB_HOST", "localhost"),
        port=os.getenv("DB_PORT", "5432")
    )

    parser = BinanceParser()
    parser.run_websocket(db_client=db_client, save_db=True)
