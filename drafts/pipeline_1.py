import joblib
from sklearn.pipeline import Pipeline

# --- –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–µ–π ---
crypto_model = joblib.load("crypto_classifier_model.pkl")         # –º–æ–¥–µ–ª—å "–∫—Ä–∏–ø—Ç–∞ / –Ω–µ –∫—Ä–∏–ø—Ç–∞"
sentiment_model = joblib.load("felt_classifier_model.pkl")              # –º–æ–¥–µ–ª—å –∞–Ω–∞–ª–∏–∑–∞ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è
label_encoder = joblib.load("label_encoder.pkl")                  # –¥–µ–∫–æ–¥–µ—Ä –º–µ—Ç–æ–∫ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—è

# --- –û–±—ë—Ä—Ç–∫–∏ –¥–ª—è –º–æ–¥–µ–ª–µ–π ---
crypto_pipe = Pipeline([("clf", crypto_model)])
sentiment_pipe = Pipeline([("clf", sentiment_model)])

# --- –§—É–Ω–∫—Ü–∏—è –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–∏ ---
def process_news(news_list):
    results = []
    for news in news_list:
        is_crypto = crypto_pipe.predict([news])[0]
        if is_crypto:  # —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ "–∫—Ä–∏–ø—Ç–∞"
            sentiment_pred = sentiment_pipe.predict([news])[0]
            sentiment_label = label_encoder.inverse_transform([sentiment_pred])[0]
            results.append({
                "—Ç–µ–∫—Å—Ç": news[:120] + "...",
                "—Ç–µ–º–∞": "–∫—Ä–∏–ø—Ç–∞",
                "–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ": sentiment_label
            })
    return results

# --- –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
if __name__ == "__main__":
    news_examples = [
        "Ethereum –ø–æ–∫–∞–∑–∞–ª —Ä–æ—Å—Ç –Ω–∞ 5% –ø–æ—Å–ª–µ –æ–¥–æ–±—Ä–µ–Ω–∏—è ETF",
        "–ü—Ä–µ–∑–∏–¥–µ–Ω—Ç –≤—ã—Å—Ç—É–ø–∏–ª —Å –∑–∞—è–≤–ª–µ–Ω–∏–µ–º –ø–æ –£–∫—Ä–∞–∏–Ω–µ",
        "–ë–ª–æ–∫—á–µ–π–Ω-–ø–ª–∞—Ç—Ñ–æ—Ä–º–∞ Anon World –∏–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–ª–∞ –ø—Ä–æ—Ç–æ–∫–æ–ª Farcaster",
        "–¶–ë –†–§ –æ–∂–∏–¥–∞–µ—Ç —Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å –∏–Ω—Ñ–ª—è—Ü–∏–∏ –¥–æ –∫–æ–Ω—Ü–∞ –≥–æ–¥–∞"
    ]

    output = process_news(news_examples)

    for i, item in enumerate(output, 1):
        print(f"\nüîπ –ù–æ–≤–æ—Å—Ç—å {i}:")
        print(f"–¢–µ–∫—Å—Ç: {item['—Ç–µ–∫—Å—Ç']}")
        print(f"–ù–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ: {item['–Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ']}")
