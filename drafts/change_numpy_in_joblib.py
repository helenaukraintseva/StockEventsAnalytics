import os
import joblib


def resave_pickles(folder_path, suffix="_compatible", compress=3):
    """
    –ü–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –≤—Å–µ .pkl —Ñ–∞–π–ª—ã –≤ –ø–∞–ø–∫–µ –≤ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ–º —Ñ–æ—Ä–º–∞—Ç–µ.

    :param folder_path: –ü—É—Ç—å –∫ –ø–∞–ø–∫–µ —Å .pkl —Ñ–∞–π–ª–∞–º–∏
    :param suffix: –°—É—Ñ—Ñ–∏–∫—Å –¥–ª—è –Ω–æ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é '_compatible')
    :param compress: –£—Ä–æ–≤–µ–Ω—å –∫–æ–º–ø—Ä–µ—Å—Å–∏–∏ (0‚Äì9, –≥–¥–µ 0 ‚Äî –±–µ–∑ —Å–∂–∞—Ç–∏—è)
    """
    for file in os.listdir(folder_path):
        if file.endswith(".pkl"):
            original_path = os.path.join(folder_path, file)
            # new_filename = file.replace(".pkl", f"{suffix}.pkl")
            new_path = os.path.join("new_pkls", file)

            try:
                print(f"üì• –ó–∞–≥—Ä—É–∑–∫–∞: {original_path}")
                obj = joblib.load(original_path)

                print(f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–∞–∫: {new_path}")
                joblib.dump(obj, new_path, compress=compress)

            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ {file}: {e}")


# === –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ===
if __name__ == "__main__":
    resave_pickles("NLP")
    # resave_pickles("trained_signal_models_3")
