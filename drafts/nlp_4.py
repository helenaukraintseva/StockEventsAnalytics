import pandas as pd
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.linear_model import LogisticRegression
from sklearn.pipeline import Pipeline
from sklearn.preprocessing import LabelEncoder
from sklearn.model_selection import train_test_split
from sklearn.metrics import classification_report
from sklearn.metrics import accuracy_score, f1_score, classification_report, recall_score, precision_score
import joblib
import nltk
from nltk.corpus import stopwords
nltk.download("stopwords")

russian_stopwords = stopwords.words("russian")

# --- 1. –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ ---
df = pd.read_csv("crypto_news_data.csv")  # –§–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∫–æ–ª–æ–Ω–∫–∏: text, felt
df.dropna(subset=["text", "felt"], inplace=True)

# --- 2. –ö–æ–¥–∏—Ä—É–µ–º –º–µ—Ç–∫–∏ (Positive, Negative, Neutral) ---
label_encoder = LabelEncoder()
df["label_encoded"] = label_encoder.fit_transform(df["felt"])  # 0, 1, 2

# --- 3. –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –Ω–∞ train/test ---
X_train, X_test, y_train, y_test = train_test_split(
    df["text"], df["label_encoded"], test_size=0.2, random_state=42
)

# --- 4. –°–æ–∑–¥–∞—ë–º NLP –ø–∞–π–ø–ª–∞–π–Ω ---
model = Pipeline([
    ("tfidf", TfidfVectorizer(
        max_features=5000,
        stop_words=russian_stopwords,  # –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å "russian" –∏–ª–∏ —Å–ø–∏—Å–æ–∫ –¥–ª—è —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã—Ö —Ç–µ–∫—Å—Ç–æ–≤
        ngram_range=(1, 2)
    )),
    ("clf", LogisticRegression(max_iter=1000, multi_class="multinomial"))
])

# --- 5. –û–±—É—á–µ–Ω–∏–µ –º–æ–¥–µ–ª–∏ ---
model.fit(X_train, y_train)

# --- 6. –û—Ü–µ–Ω–∫–∞ –º–æ–¥–µ–ª–∏ ---
y_pred = model.predict(X_test)
print("Accuracy:", accuracy_score(y_test, y_pred))
# print("Precision:", precision_score(y_test, y_pred))
# print("Recall:", recall_score(y_test, y_pred))
# print("F1 Score:", f1_score(y_test, y_pred))
print("\nüß† –ö–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ü–∏–æ–Ω–Ω—ã–π –æ—Ç—á—ë—Ç:")

print(classification_report(y_test, y_pred, target_names=label_encoder.classes_))

# --- 7. –°–æ—Ö—Ä–∞–Ω—è–µ–º –º–æ–¥–µ–ª—å –∏ LabelEncoder ---
joblib.dump(model, "felt_classifier_model.pkl")
joblib.dump(label_encoder, "label_encoder.pkl")

# --- 8. –ü—Ä–∏–º–µ—Ä –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è ---
example = "Bitcoin price surges after ETF approval"
pred = model.predict([example])[0]
label = label_encoder.inverse_transform([pred])[0]
print(f"\nüìà –ü—Ä–∏–º–µ—Ä: {example}")
print(f"üîé –ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–µ: {label}")
